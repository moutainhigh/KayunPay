package com.dutiantech.controller.admin;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.dutiantech.util.*;
import com.dutiantech.util.Number;
import com.dutiantech.Message;
import com.dutiantech.anno.AuthNum;
import com.dutiantech.controller.BaseController;
import com.dutiantech.interceptor.AuthInterceptor;
import com.dutiantech.interceptor.PkMsgInterceptor;
import com.dutiantech.model.ContractTemplate;
import com.dutiantech.model.Contracts;
import com.dutiantech.model.OPUserV2;
import com.dutiantech.model.TransferUser;
import com.dutiantech.service.ContractsService;
import com.dutiantech.service.OPUserV2Service;
import com.dutiantech.service.TransferUserService;
import com.dutiantech.util.SysEnum.StoreNo;
import com.jfinal.aop.Before;
import com.jfinal.core.ActionKey;
import com.jfinal.plugin.activerecord.Page;
@Before(value=AuthInterceptor.class)
public class ContractsController extends BaseController{
	
	private ContractsService contractsService=getService(ContractsService.class);
	private OPUserV2Service opUserV2Service = getService(OPUserV2Service.class);
	private TransferUserService transferUserService = getService(TransferUserService.class);
	
	/**
	 * 查询合同列表信息
	 * @return
	 */
	@ActionKey("/queryContractsByPage")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryContractsByPage(){
		//获取当前页码、每页显示的数量
		Integer pageNumber=getParaToInt("pageNumber",1);
		pageNumber=pageNumber > 0 ? pageNumber:1;
		
		//获取模糊查询字段
		String dimSearch=getPara("dimSearch","");
		
		Integer pageSize=getParaToInt("pageSize",10);
		
		Page<Contracts> contractsList = contractsService.findContractsByPage(pageNumber, pageSize,dimSearch);
		if(pageNumber>contractsList.getTotalPage() && contractsList.getTotalPage()>0){
			pageNumber=contractsList.getTotalPage();
			contractsList = contractsService.findContractsByPage(pageNumber, pageSize,dimSearch);
		}
		for (int i = 0; i < contractsList.getList().size(); i++) {
			Contracts contracts = contractsList.getList().get(i);
			String opCode = contracts.getStr("opCode");
			//查询后台操作员
			String opName = contractsService.queryOpName(opCode);
			contracts.set("opCode", opName);
		}
		return succ("ok", contractsList);
	}
	
	/**
	 * 查询单条合同信息
	 * @return
	 */
	@ActionKey("/queryContractsById")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryContractsById(){
		//获取合同编号
		String contractCode=getPara("contractCode");
		
		Contracts contracts = contractsService.findById(contractCode);
		
		String op_code = contracts.getStr("opCode");
		//查询后台操作员
		String opName = contractsService.queryOpName(op_code);
		
		contracts.set("opCode", opName);
		return succ("ok", contracts);
	}
	
	/**
	 * 更新合同信息
	 * @return
	 */
	@ActionKey("/modContracts")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message modContracts(){
		//获取后台操作员的编码
		String opCode=getUserCode();
		//获取合同信息
		String contractCode=getPara("contractCode");
		Integer uid=getParaToInt("uid");
		String title=getPara("title","");
		String content=getPara("content","");
		String updateDateTime=DateUtil.getNowDateTime();
		
		Map<String, Object> para = new HashMap<String, Object>();
		para.put("uid", uid);
		para.put("title", title);
		para.put("content", content);
		para.put("opCode", opCode);
		para.put("updateDateTime", updateDateTime);
		
		boolean result = contractsService.modContracts(contractCode, para);
		if(result){
			return succ("ok", result);
		}
		return error("no", "修改失败", null);
	}
	
	/**
	 * 添加合同信息
	 * @return
	 * @throws ParseException 
	 * @throws NumberFormatException 
	 */
	@ActionKey("/addContracts")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message addContracts(){
		// 获取后台操作人员编码
		String opUserCode = getUserCode();
		// 根据合同类型获取合同模板
		String contractTemplateType = getPara("templateType", "");
		if (StringUtil.isBlank(contractTemplateType)) {
			return error("01", "合同类型错误", null);
		}
		ContractTemplateController conTemplController = new ContractTemplateController();
		List<ContractTemplate> contractTemplates = conTemplController.queryByType(contractTemplateType);
		// 解析页面填写 
		String transferUserNo=getPara("transferUserNo", "");//债权人编号
		if(transferUserNo.equals("")){
			return error("02", "获取债权人失败", null);
		}
		TransferUser transferUser = transferUserService.findById(transferUserNo);//根据id查询债权人信息
		String loanUserName=getPara("loanUserName", "");	// 借款人姓名
		String loanUserCardId=getPara("loanUserCardId", "");	// 借款人身份证号
		if(loanUserName.equals("")||loanUserCardId.equals("")){
			return error("03", "获取借款人失败", null);
		}
		Long loanAmount=getParaToLong("loanAmount", (long) 0)/100;//借款金额
		if(loanAmount==0){
			return error("04", "获取借款金额失败", null);
		}
		String loanAmountCN = NumberToCN.number2CNMontrayUnit(new BigDecimal(loanAmount));
		Long moneyLoan=getParaToLong("moneyLoan",(long) 0);//现金支付金额
		Long bankLoan=loanAmount-moneyLoan;//银行转账
		long rateByMonth=getParaToLong("rateByMonth",(long)0);//借款利率
		if(rateByMonth==0){
			return error("05", "获取借款利率失败", null);
		}
		long rateBySynthesize=getParaToLong("rateBySynthesize",(long)0);//综合利率
		if(rateBySynthesize==0){
			return error("06", "获取综合利率失败", null);
		}
		Integer limit=getParaToInt("limit", 0);//借款期限
		if(limit==0){
			return error("07", "获取借款期限失败", null);
		}
		
		//汽车信息
		String carName="";//汽车名
		String carBrand="";//车辆品牌
		String carNumber="";//车辆牌号
		String engineNumber="";//发动机号
		String carframe="";//车架号码
		String carList="";//抵押车辆列表
		
		String cars=getPara("cars", "");//车辆信息
		if(!"".equals(cars)){
			String[] carsArray=cars.split(",");
			for (String carss : carsArray) {
				String[] carsArrays = carss.split("\\|");
				carList+="<p class='MsoNormal' style='text-indent:21pt;' align='left'>";
				carList+="<span style='line-height:2;'>车辆品牌："+carsArrays[0]+"&nbsp;车辆牌号："+carsArrays[2]+"&nbsp;发动机号："+carsArrays[3]+"&nbsp;车架号码："+carsArrays[4]+"</span></p>";
				
				carName+=carsArrays[0]+carsArrays[1]+" ";
				carBrand+=carsArrays[0]+" ";
				carNumber+=carsArrays[2]+" ";
				engineNumber+=carsArrays[3]+" ";
				carframe+=carsArrays[4]+" ";
			}
		}else {
			carList="<p class='MsoNormal' style='text-indent:18.05pt;' align='left'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>";
		}
		
		//担保人
		ArrayList<String[]> lstDbrs=new ArrayList<String[]>();
		String dbrs=getPara("dbrs", "");
		if("".equals(dbrs)){
			lstDbrs.add(new String[]{"","","",""});
		}else {
			String[] dbrsArray=dbrs.split(",");
			for (String dbr : dbrsArray) {
				String[] split = dbr.split("\\|");
				lstDbrs.add(split);
			}
		}
		String loanDate=getPara("loanDate", "");	// 签订时间
		String signYear = null, signMonth = null, signDay = null;
		if (loanDate != null && loanDate.length() == 8) {
			signYear = loanDate.substring(0, 4);
			signMonth = loanDate.substring(4, 6);
			signDay = loanDate.substring(6, 8);
		}
		String repayDate=DateUtil.addMonth(loanDate, limit);	// 还款时间
		String repayYear = null, repayMonth = null, repayDay = null;
		if (repayDate != null && repayDate.length() == 8) {
			repayYear = loanDate.substring(0, 4);
			repayMonth = loanDate.substring(4, 6);
			repayDay = loanDate.substring(6, 8);
		}
		String templateType = getPara("templateType", "");	// 合同类型
		String refundType = templateType.replace("GPS", "").replace("质押", "");	// 还款方式
		String contractsNum = getPara("contractsNum","");	// 合同编号 
		String refundDetailTable = getRefundDetailTable(loanAmount,limit,rateBySynthesize,rateByMonth,refundType,loanDate);	// 还款明细表：每期还款金额
		String refundPlanTable = getRefundPlanTable(loanAmount, limit, rateByMonth, refundType, loanDate);	// 借款合同（质押） ：还款计划明细表
		String deditPayStandardTable = getDeditPayStandardTable(loanAmount, rateByMonth, limit, refundType);	// 借款合同（质押）：提前结清违约金支付标准表
		String serviceChargeTable = getServiceChargeTable(loanAmount, limit, rateBySynthesize, rateByMonth, refundType, loanDate);	// 融资服务协议：服务费支付时间及金额表
		
		// Replace合同模板
		Map<String, String> map = new HashMap<String, String>();
		map.put("[transferUserName]", transferUser.getStr("name"));//债权人姓名
		map.put("[transferUserCardId]", transferUser.getStr("cardId"));//债权人身份证号
		map.put("[transferUserAddress]", transferUser.getStr("address"));//债权人住址
		map.put("[transferUserMobile]", transferUser.getStr("mobile"));//债权人联系电话
		map.put("[transferUserSex]", ("M".equals(transferUser.getStr("sex"))?"男":"女"));//债权人性别
		map.put("[transferUserbankNo]", transferUser.getStr("bankNo"));//债权人银行卡卡号
		map.put("[TUbankUserName]", transferUser.getStr("bankUserName"));//债权人银行卡户名
		map.put("[TUbankName]", transferUser.getStr("bankName"));//债权人银行卡户名
		map.put("[loanUserName]", loanUserName);	// 借款人姓名
		map.put("[loanUserCardId]", loanUserCardId);	// 借款人身份证号
		map.put("[loanUserAddress]", getPara("loanUserAddress", ""));	// 借款人家庭住址
		map.put("[loanUserMobile]", getPara("loanUserMobile", ""));	// 借款人手机号
		map.put("[serveMobile]", getPara("serveMobile", ""));	// 客服专号
		map.put("[loanAmount]", loanAmount.toString());	// 贷款金额小写
		map.put("[loanAmountCN]", loanAmountCN);	// 贷款金额大写
		map.put("[moneyLoan]", moneyLoan.toString());	// 现金支付金额
		map.put("[bankLoan]", bankLoan.toString());	// 银行转账
		map.put("[rateByMonth]", Number.longToString(rateByMonth)+"%");	// 借款利率
		map.put("[rateBySynthesize]", Number.longToString(rateBySynthesize)+"%");	// 综合利率
		map.put("[loanUsed]", getPara("loanUsed", ""));//借款用途
		map.put("[limit]", limit.toString());//借款期限
		map.put("[ensureCompanyName]", getPara("ensureCompanyName", ""));//担保人姓名(公司)
		map.put("[companyCode]", getPara("companyCode", ""));//担保人公司组织机构代码(公司)
		map.put("[businessPlace]", getPara("businessPlace", ""));//担保人经营场所(公司)
		map.put("[companyPhone]", getPara("companyPhone", ""));//担保人联系电话(公司)
		map.put("[loanBankNo]", getPara("loanBankNo", ""));//银行卡卡号
		map.put("[loanBankName]", getPara("loanBankName", ""));//银行全称
		map.put("[addYear]", signYear);	// 签订年份
		map.put("[addMonth]", signMonth);	// 签订月份
		map.put("[addDay]", signDay);	// 签订日期
		map.put("[repayYear]", repayYear);	// 还款年份
		map.put("[repayMonth]", repayMonth);	// 还款月份
		map.put("[repayDay]", repayDay);	// 还款日期
		map.put("[templateType]", templateType);	// 合同类型
		map.put("[refundType]", refundType);	// 还款方式
		map.put("[carManager]", templateType.replace("等本等息", "").replace("先息后本", ""));//车辆管理（GPS、质押）
		map.put("[companyAddress]", getPara("companyAddress", ""));//收车费用标准
		map.put("[contractsNum]", contractsNum);	// 合同编号
		map.put("[addressSign]", getPara("addressSign", ""));	//合同签署地
		map.put("[court]", getPara("court", ""));	//合同签署地法院
		map.put("[refundDetailTable]", refundDetailTable);	// 还款明细表：每期还款金额
		map.put("[refundPlanTable]", refundPlanTable);	// 借款合同（质押） ：还款计划明细表
		map.put("[deditPayStandardTable]", deditPayStandardTable);	// 借款合同（质押）：提前结清违约金支付标准表
		map.put("[serviceChargeTable]", serviceChargeTable);	// 融资服务协议：服务费支付时间及金额表
		
		map.put("[carList]", carList);//抵押车辆列表
		map.put("[carName]", carName);//汽车名
		map.put("[carBrand]", carBrand);//车辆品牌
		map.put("[carNumber]", carNumber);//车辆牌号
		map.put("[engineNumber]", engineNumber);//发动机号
		map.put("[carframe]", carframe);//车架号码
		
		//替换合同模板内容
		String errTitle="";//合同添加错误信息
		for (ContractTemplate contractTemplate : contractTemplates) {
			String title = contractTemplate.getStr("title");//合同标题
			String content = contractTemplate.getStr("content");//合同内容
			Contracts contract = new Contracts();
			contract.set("contractCode", UIDUtil.generate());//合同code
			contract.set("title", title + contractsNum);
			contract.set("contractsNum", contractsNum);//合同编号
			contract.set("opCode", opUserCode);
			contract.set("addDateTime", DateUtil.getNowDateTime());
			contract.set("updateDateTime", DateUtil.getNowDateTime());
			boolean save=true;
			
			//循环打印担保人合同
			if("担保书（个人版）".equals(title)){
				for (String[] dbr : lstDbrs) {
					map.put("[ensureName]", dbr[0]);//担保人姓名
					map.put("[ensureCardId]", dbr[1]);//担保人 身份证号
					map.put("[ensureMobile]", dbr[2]);//担保人 联系电话
					map.put("[ensureAddress]", dbr[3]);//担保人住所
					
					content = conTemplController.replaceTemplateContent(content, map);//替换合同字段
					contract.set("content", content);
					save = contractsService.save(contract);
					if(!save){
						errTitle+=" "+title+"-"+dbr[0];
					}
				}
				continue;
			}
			content = conTemplController.replaceTemplateContent(content, map);//替换合同字段
			contract.set("content", content);
			save = contractsService.save(contract);
			if(!save){
				errTitle+="_"+title;
			}
		}
		if("".equals(errTitle)){
			return succ("succ08", "添加合同成功！");
		}else{
			return error("err09", "添加错误："+errTitle, null);
		}
	}
	
	/**
	 * 删除单条合同信息
	 * @return
	 */
	@ActionKey("/delContractsById")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message delContractsById(){
		//获取合同编码
		String contractCode=getPara("contractCode");
		
		boolean result = contractsService.delContractsById(contractCode);
		if(result){
			return succ("ok", result);
		}
		return error("no", "删除失败!", null);
	}
	
	/**
	 * 生成合同编号
	 * @return
	 */
	@ActionKey("/generateContractNo")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class, PkMsgInterceptor.class})
	public Message generateContractNo() {
		String opUserCode = getUserCode();
		if (StringUtil.isBlank(opUserCode)) {
			return error("01", "获取用户信息失败", null);
		}
		StringBuilder contractNo = new StringBuilder();
		// 拼接合同门店号
		OPUserV2 opUserV2 = opUserV2Service.findById(opUserCode);
		String opGroup = opUserV2.getStr("op_group");
		for (StoreNo store : StoreNo.values()) {
			if (store.val().equals(opGroup)) {
				contractNo.append(store.desc());
			}
		}
		// 拼接合同生成日期
		contractNo.append(DateUtil.getNowDate());
		// 拼接合同编号
		long tmpLastNo = contractsService.countByDate(DateUtil.getNowDate())+1;
		if (tmpLastNo < 10) {
			contractNo.append("0" + tmpLastNo);
		} else {
			contractNo.append(tmpLastNo);
		}
		if (StringUtil.isBlank(opGroup)) {
			return error("01", "获取门店信息失败", null);
		}
		return succ("suc", contractNo.toString());
	}
	/**
	 * 还款明细表：每期还款金额
	 * @param loanAmount	贷款金额
	 * @param limit		期数
	 * @param rate		利率
	 * @param rateBySynthesize		综合利率
	 * @param rateByMonth		月利率
	 * @param refundType	还款方式
	 * @param loanDate		借款日期
	 * @return
	 */
	public String getRefundDetailTable(long loanAmount, int limit, long rateBySynthesize, long rateByMonth, String refundType, String loanDate){
		//年利率
		long rate = rateByMonth*12;
		//借款日期前一天
		String returnDate = DateUtil.delDay(loanDate, 1);
		//获取截止日期
		String dateEndCH = getDateEndCH(limit, loanDate, returnDate);
		
		String output_html = "<table style='width:100%;text-align: center;' cellpadding='2' cellspacing='0' border='1' bordercolor='#000000'>";
		output_html+="<tr><td>序号</td><td>还款时间</td><td>本金(元)</td><td>利息(元)</td><td>服务费(元)</td><td>合计(元)</td></tr>";
		//计算还款
		LiCai licai = new LiCai(loanAmount*100, rate, limit);
		List<Map<String, Long>> licaiMap = new ArrayList<Map<String,Long>>();
		if("等本等息".equals(refundType)){
			licaiMap = licai.getDengEList();
		}else{
			licaiMap = licai.getDengXiList();
		}
		for (int i = 0; i < licaiMap.size(); i++) {
			int month = licaiMap.get(i).get("month").intValue();
			//将期数转成汉字
			String index=NumberToCN.toChinese(String.valueOf(month));
			//拼接还款期数
			output_html+="<tr><td>第"+index+"期</td>";
			
			String refundDate = getRefundDate(month, returnDate, dateEndCH);
			//拼接还款日期
			output_html+="<td>"+refundDate+"</td>";
			
			long ben = 0;//本金
			long xi = 0;//利息
			
			ben = licaiMap.get(i).get("ben");
			xi = licaiMap.get(i).get("xi");
			
			//拼接本金、利息
			output_html += "<td>"+Number.doubleToStr(ben)+"</td><td>"+Number.doubleToStr(xi)+"</td>";
			
			long serviceCharge = 0; //服务费
			float fwfll = 0;//服务费利率
			fwfll = (float)(rateBySynthesize-rateByMonth)/10/10/10/10;
			serviceCharge = (long) (fwfll*loanAmount*100);
			
			long total=0;//总计费用
			total = ben+xi+serviceCharge;
			
			//拼接服务费、总计费用
			output_html +="<td>"+Number.doubleToStr(serviceCharge)+"</td><td>"+Number.doubleToStr(total)+"</td></tr>";
		}
		
		output_html +="</table>";
		return output_html;
	}
	
	/**
	 * 借款合同 ：还款计划明细表
	 * @param loanAmount	贷款金额
	 * @param limit		期数
	 * @param rate		年利率
	 * @param rateByMonth		月利率
	 * @param refundType	还款方式
	 * @param loanDate		借款日期
	 * @return
	 */
	public String getRefundPlanTable(long loanAmount, int limit, long rateByMonth, String refundType, String loanDate){
		//年利率
		long rate = rateByMonth*12;
		//借款日期前一天
		String returnDate = DateUtil.delDay(loanDate, 1);
		//获取截止日期
		String dateEndCH = getDateEndCH(limit, loanDate, returnDate);
		
		String output_html = "<table style='width:100%;text-align: center;' cellpadding='2' cellspacing='0' border='1' bordercolor='#000000'>";
		output_html += "<tr><td>序号</td><td>还款时间</td><td>本金</td><td>利率</td><td>利息</td><td>合计</td></tr>";
		
		//计算还款
		LiCai licai = new LiCai(loanAmount*100, rate, limit);
		List<Map<String, Long>> licaiMap = new ArrayList<Map<String,Long>>();
		if("等本等息".equals(refundType)){
			licaiMap = licai.getDengEList();
		}else{
			licaiMap = licai.getDengXiList();
		}
		for (int i = 0; i < licaiMap.size(); i++) {
			int month = licaiMap.get(i).get("month").intValue();
			String index=NumberToCN.toChinese(String.valueOf(month));
			//拼接还款期数
			output_html+="<tr><td>第"+index+"期</td>";
			
			String refundDate = getRefundDate(month, returnDate, dateEndCH);
			//拼接还款日期
			output_html+="<td>"+refundDate+"</td>";
			
			long ben = 0;//本金
			long xi = 0;//利息
			long total=0;//合计
			
			ben = licaiMap.get(i).get("ben");
			xi = licaiMap.get(i).get("xi");
			total = ben+xi;
			//拼接本金、利率、利息、合计
			output_html += "<td>"+Number.doubleToStr(ben)+"元</td><td>"+(float)rateByMonth/100+"%</td><td>"+Number.doubleToStr(xi)+"元</td><td>"+Number.doubleToStr(total)+"元</td></tr>";
		}
		output_html +="</table>";
		return output_html;
	}
	

	/**
	 * 借款合同：提前结清违约金支付标准表
	 * @param loanAmount  贷款金额
	 * @param rate	年利率
	 * @param rateByMonth 月利率
	 * @param limit	期数
	 * @param refundType  还款方式
	 * @return
	 */
	public String getDeditPayStandardTable(long loanAmount, long rateByMonth, int limit, String refundType){
		//年利率
		long rate = rateByMonth*12;
		String output_html="<table style='width:100%;text-align: center;' cellpadding='2' cellspacing='0' border='1' bordercolor='#000000'>";
		output_html += "<tr><td>提前期数</td><td>违约金金额</td></tr>";
		
		//计算还款
		LiCai licai = new LiCai(loanAmount*100, rate, limit);
		List<Map<String, Long>> licaiMap = new ArrayList<Map<String,Long>>();
		if("等本等息".equals(refundType)){
			licaiMap = licai.getDengEList();
		}else{
			licaiMap = licai.getDengXiList();
		}
		
		for (int i = 0; i < licaiMap.size(); i++) {
			if(i>=9){
				break;
			}
			int month=licaiMap.get(i).get("month").intValue();
			
			double a=0;//系数
			switch (i) {
			case 0:
				a=0.9;
				break;
			case 1:
				a=1.7;
				break;
			case 2:
				a=2.4;
				break;
			case 3:
				a=3.0;
				break;
			case 4:
				a=3.5;
				break;
			case 5:
				a=3.9;
				break;
			case 6:
				a=4.2;
				break;
			case 7:
				a=4.4;
				break;
			default:
				a=4.5;
				break;
			}
			//拼接违约金
			if(month<9){
				output_html += "<tr><td>"+month+"</td><td>违约金=借款本金*"+(float)rateByMonth/100+"%*"+a+"</td></tr>";
			}else{
				output_html += "<tr><td>"+month+"期及以上</td><td>违约金=借款本金*"+(float)rateByMonth/100+"%*"+a+"</td></tr>";
			}
		}
		output_html+="</table>";
		return output_html;
	}
	
	
	/**
	 * 融资服务协议：服务费支付时间及金额表
	 * @param loanAmount 贷款金额
	 * @param rate 年利率
	 * @param limit 期数
	 * @param rateBySynthesize 综合利率
	 * @param rateByMonth 月利率
	 * @param refundType 还款方式
	 * @param loanDate 借款日期
	 * @return
	 */
	public String getServiceChargeTable(long loanAmount, int limit, long rateBySynthesize, long rateByMonth, String refundType, String loanDate){
		//年利率
		long rate = rateByMonth*12;
		
		float rzfwffl=(float)(rateBySynthesize-rateByMonth)/10/10/10/10;//服务费率
		
		//借款日期前一天
		String returnDate = DateUtil.delDay(loanDate, 1);
		//获取截止日期	
		String dateEndCH=getDateEndCH(limit, loanDate,returnDate);
		
		long serviceCharge=0;//服务费
		serviceCharge=(long) (rzfwffl*loanAmount*100);
		
		String output_html = "<table style='width:100%;text-align: center;' cellpadding='2' cellspacing='0' border='1' bordercolor='#000000'>";
		output_html += "<tr><td>序号</td><td>支付时间</td><td>融资服务费费率</td><td>融资服务费金额</td></tr>";
		
		//计算还款
		LiCai licai = new LiCai(loanAmount*100, rate, limit);
		List<Map<String, Long>> licaiMap = new ArrayList<Map<String,Long>>();
		if("等本等息".equals(refundType)){
			licaiMap = licai.getDengEList();
		}else{
			licaiMap = licai.getDengXiList();
		}
		for (int i = 0; i < licaiMap.size(); i++) {
			int month = licaiMap.get(i).get("month").intValue();
			String index = NumberToCN.toChinese(String.valueOf(month));
			//拼接序号
			output_html += "<tr><td>第"+index+"期</td>";
			
			String refundDate = getRefundDate(month, returnDate, dateEndCH);
			//拼接支付时间
			output_html += "<td>"+refundDate+"</td>";
			//拼接服务费率、服务费
			output_html += "<td>"+rzfwffl*100+"%</td><td>"+Number.doubleToStr(serviceCharge)+"元</td></tr>";
		}
		output_html += "</table>";
		return output_html;
	}
	/**
	 * 获取截止日期
	 * @param limit 期数
	 * @param loanDate	借款日期
	 * @return
	 */
	public String getDateEndCH(int limit, String loanDate,String returnDate){
		
		//转换日期格式
		/*String dateStartCH = DateUtil.getStrFromDate(
				DateUtil.getDateFromString(loanDate, "yyyyMMdd"), "yyyy年MM月dd日");*/
		String dateEndCH = DateUtil.getStrFromDate(
				DateUtil.getDateFromString(CommonUtil.anyRepaymentDate4string(returnDate, limit), "yyyyMMdd"), "yyyy年MM月dd日");

		//兼容2月
		if(DateUtil.getNowDate().endsWith("01")){
			
			String date4string = CommonUtil.anyRepaymentDate4string(returnDate, limit);
			String end4month = CommonUtil.getFirstDataAndLastDateByMonth(Integer.parseInt(date4string.substring(0, 4)),
					Integer.parseInt(date4string.substring(4, 6)), "yyyyMMdd")[1].substring(6, 8);
			dateEndCH = dateEndCH.substring(0,dateEndCH.length()-3) + end4month + "日";
		}
		return dateEndCH;
	}
	/**
	 * 获取还款日期
	 * @param month 第几期
	 * @param returnDate  借款前一天
	 * @param dateEndCH	 截止日期
	 * @return
	 */
	public String getRefundDate(int month, String returnDate, String dateEndCH){
		String date4string = CommonUtil.anyRepaymentDate4string(returnDate, month);
		String date4Ch = DateUtil.getStrFromDate(
				DateUtil.getDateFromString(date4string, "yyyyMMdd"), "yyyy年MM月dd日");
		
		//兼容2月
		if(DateUtil.getNowDate().endsWith("01")){
			String end4month = CommonUtil.getFirstDataAndLastDateByMonth(Integer.parseInt(date4string.substring(0, 4)),
					Integer.parseInt(date4string.substring(4, 6)), "yyyyMMdd")[1].substring(6, 8);
			date4Ch = date4Ch.substring(0,dateEndCH.length()-3) + end4month + "日";
		}
		return date4Ch;
	}
}

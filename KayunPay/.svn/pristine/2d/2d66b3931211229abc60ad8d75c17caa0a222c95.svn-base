package com.dutiantech.controller.portal;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dutiantech.CACHED;
import com.dutiantech.Message;
import com.dutiantech.anno.AuthNum;
import com.dutiantech.anno.ResponseCached;
import com.dutiantech.controller.BaseController;
import com.dutiantech.interceptor.AuthInterceptor;
import com.dutiantech.interceptor.PkMsgInterceptor;
import com.dutiantech.model.AutoLoan_v2;
import com.dutiantech.model.BizLog.BIZ_TYPE;
import com.dutiantech.model.Funds;
import com.dutiantech.model.LoanInfo;
import com.dutiantech.model.LoanNotice;
import com.dutiantech.model.LoanOverdue;
import com.dutiantech.model.LoanTrace;
import com.dutiantech.model.LoanTransfer;
import com.dutiantech.model.SMSLog;
import com.dutiantech.model.SettlementEarly;
import com.dutiantech.model.Tickets;
import com.dutiantech.model.User;
import com.dutiantech.model.UserInfo;
import com.dutiantech.service.AutoLoanService;
import com.dutiantech.service.AutoMapSerivce;
import com.dutiantech.service.FuiouTraceService;
import com.dutiantech.service.FundsServiceV2;
import com.dutiantech.service.FundsTraceService;
import com.dutiantech.service.LoanApplyService;
import com.dutiantech.service.LoanInfoService;
import com.dutiantech.service.LoanNoticeService;
import com.dutiantech.service.LoanOverdueService;
import com.dutiantech.service.LoanTraceService;
import com.dutiantech.service.LoanTransferService;
import com.dutiantech.service.SMSLogService;
import com.dutiantech.service.SettlementEarlyService;
import com.dutiantech.service.TicketsService;
import com.dutiantech.service.UserInfoService;
import com.dutiantech.service.UserService;
import com.dutiantech.util.CommonUtil;
import com.dutiantech.util.DateUtil;
import com.dutiantech.util.LiCai;
import com.dutiantech.util.Number;
import com.dutiantech.util.StringUtil;
import com.dutiantech.util.SysEnum.FuiouTraceType;
import com.fuiou.data.CommonRspData;
import com.fuiou.data.QueryBalanceResultData;
import com.jfinal.aop.Before;
import com.jfinal.core.ActionKey;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;

public class LoanCenterController extends BaseController{
	
	private LoanInfoService loanInfoService = getService(LoanInfoService.class);
	private LoanTraceService loanTraceService = getService(LoanTraceService.class);
	private LoanTransferService loanTransferService = getService(LoanTransferService.class);
	private AutoLoanService autoLoanService = getService(AutoLoanService.class);
	private AutoMapSerivce autoMapService = getService(AutoMapSerivce.class);
	//private FundsService fundsService = getService(FundsService.class);
	private FundsServiceV2 fundsServiceV2 = getService(FundsServiceV2.class);
	private LoanNoticeService loanNoticeService = getService(LoanNoticeService.class);
	private LoanOverdueService loanOverdueService = getService(LoanOverdueService.class);
	private FundsTraceService fundsTraceService = getService(FundsTraceService.class ) ;
	private UserService userService = getService(UserService.class);
	private LoanApplyService loanApplyService = getService(LoanApplyService.class);
	private TicketsService ticketService = getService( TicketsService.class );
	private SMSLogService smsLogService = getService(SMSLogService.class);
	private FuiouTraceService fuiouTraceService=getService(FuiouTraceService.class);
	private UserInfoService userInfoService=getService(UserInfoService.class);
	private SettlementEarlyService settlementEarlyService=getService(SettlementEarlyService.class);
	/**
	 * 获取我的贷款信息
	 * @param pageNumber
	 * @param pageSize
	 * @param loanState
	 * @param result
	 * @return
	 */
	@ActionKey("/queryLoan4My")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryLoan4My(){
		Integer pageNumber = getPageNumber();
		Integer pageSize = getPageSize();
		String loanState = getPara("loanState");
		
		//获取用户标识
		String userCode = getUserCode();
		
		Page<LoanInfo> loanInfos = loanInfoService.findByPage(userCode,pageNumber, pageSize, null, null,null,null, loanState, null);
		
		return succ("获取成功", loanInfos);
	}	
	
	
	/**
	 * 获取我的投资信息
	 * @param pageNumber
	 * @param pageSize
	 * @param result
	 * @return
	 */
	@ActionKey("/queryInvest4My")
	@AuthNum(value=999)
	@ResponseCached(cachedKey="queryInvest4My", cachedKeyParm="beginDateTime|endDateTime|traceState|pageNumber|pageSize|@userCode",mode="remote" , time=5)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryLoanTrace4My(){
		
		Integer pageNumber = getPageNumber();
		Integer pageSize = getPageSize();
		String traceState = getPara("traceState");
		String beginDateTime = getPara("beginDateTime"); 
		String endDateTime = getPara("endDateTime"); 
		
		//获取用户标识
		String userCode = getUserCode();
		
		if(StringUtil.isBlank(traceState) == false && "A".equals(traceState)){
			traceState += ",D";
		}	
		Page<LoanTrace> loanTraces = loanTraceService.findByPage(pageNumber, pageSize,
				beginDateTime, endDateTime, userCode, traceState);
		
		LoanTrace loanTrace=null;
		ArrayList<LoanTrace> list = (ArrayList<LoanTrace>) loanTraces.getList();
		for (int i = 0; i < list.size(); i++) {
			loanTrace=list.get(i);
			int loanTimeLimit=loanTrace.getInt("loanTimeLimit");//还款期限	int rateByYear =loanTrace.getInt("rateByYear");
			int rateByYear =loanTrace.getInt("rateByYear");
			int rewardRateByYear =loanTrace.getInt("rewardRateByYear");
			long totalRate=rateByYear+rewardRateByYear;
			long payAmount=loanTrace.getLong("payAmount");//投标金额
			String refundType=loanTrace.getStr("refundType");
			long benXi=0;
			if("B".equals(traceState)){//已回收
				LiCai ff = new LiCai(payAmount , totalRate, loanTimeLimit );
				List<Map<String , Long>> xxx = null;
				if(refundType.equals("A")){
					xxx = ff.getDengEList() ;
				}else if(refundType.equals("B")){
					 xxx = ff.getDengXiList();
				}
				
				for (int j = 1; j <= xxx.size(); j++) {
					Map<String,Long> ck = xxx.get(j-1);
					
					benXi+=ck.get("benxi");
					}
			
				
				
			}
			loanTrace.put("benXi",Number.longToString(benXi));
		}
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("pageNumber", loanTraces.getPageNumber());
		map.put("pageSize", loanTraces.getPageSize());
		map.put("totalPage", loanTraces.getTotalPage());
		map.put("totalRow", loanTraces.getTotalRow());
		map.put("list", loanTraces.getList());
		
		if("N".equals(traceState)){
			Object[] countByPage = loanTraceService.countByPage(beginDateTime, endDateTime, userCode);
			map.put("totalNextAmount", countByPage[0]);
			map.put("totalNextInterest", countByPage[1]);
		}
		
		return succ("获取成功", map);
	}
	
	/**
	 * 获取我所有投资信息
	 * @param pageNumber
	 * @param pageSize
	 * @return
	 */
	@ActionKey("/queryAllInvest4My")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryAllInvest4My(){
		
		Integer pageNumber = getPageNumber();
		Integer pageSize = getPageSize();
		
		//获取用户标识
		String userCode = getUserCode();
		Page<LoanTrace> loanTraces = loanTraceService.findAllByPage(pageNumber, pageSize,userCode);
		return succ("获取成功", loanTraces);
	}
	
	
	/**
	 * 获取用户回款日期
	 * @return
	 */
	@ActionKey("/queryBackDate4User")
	@AuthNum(value=999)
	@ResponseCached(cachedKey="queryBackDate4User", cachedKeyParm="@userCode",mode="remote" , time=5)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryBackDate4User(){
		
		String userCode = getUserCode();
		
		List<LoanTrace> queryLoanBackDate = loanTraceService.queryLoanBackDate(userCode);
		
		return succ("获取成功", queryLoanBackDate);
		
	}
	/**
	 * 搜索用户指定月回款日期 ws 20170914
	 * */
	@ActionKey("/haveBackDate4User")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message haveBackDate4User(){
		String userCode = getUserCode();
		int date=Integer.parseInt(getPara("date"));
		List<LoanTrace> loanTraces = loanTraceService.queryAllLoanTrace(userCode,getPara("date")+"00");
		List<LoanTrace> list=new ArrayList<LoanTrace>();
		for(LoanTrace loanTrace:loanTraces){
			String loanState=loanTrace.getStr("loanState");
			String loanCode=loanTrace.getStr("loanCode");
			String loanDate=loanTrace.getStr("effectDate");
			int loanlimit=loanTrace.getInt("loanTimeLimit");
			int ym=Integer.parseInt(loanDate.substring(0, 6));
			if(ym<date){
				int year=ym/100;
				int month=ym%100;
				int a=(month+loanlimit)/12;
				int b=(month+loanlimit)%12;
				int ym2=(year+a)*100+b;
				String isTransfer=loanTrace.getStr("isTransfer");
			if("N".equals(loanState)||"O".equals(loanState)){
//				if("N".equals(loanState)){
//				SettlementEarly settlementEarly=settlementEarlyService.queryearly(loanCode);
//				if(null!=settlementEarly){
//					if("A".equals(settlementEarly.getStr("estatus"))){
//					int earlyLimit = settlementEarly.getInt("earlyLimit");
//					a=(month+earlyLimit)/12;
//					b=(month+earlyLimit)%12;
//					ym2=(year+a)*100+b;
//					}
//				}}
				if(ym2>=date){
					if("C".equals(isTransfer)){
					list.add(loanTrace);
						}
					if("A".equals(isTransfer)||"B".equals(isTransfer)){
						String traceCode=loanTrace.getStr("traceCode");
						List<LoanTransfer> traceTransfers=loanTransferService.getLoanTransfer8User(traceCode, "B", userCode);
						boolean checkusertranfer=checkusertranfer(traceTransfers, date, loanTrace, traceCode, userCode);
						if(checkusertranfer){
							list.add(loanTrace);
						}
					}
					}
			}
			if("P".equals(loanState)){
				int loanRecyDate=Integer.parseInt(loanTrace.getStr("loanRecyDate").substring(0,6));
				if(loanRecyDate>=date){
					if("C".equals(isTransfer)){
					list.add(loanTrace);
						}
					if("A".equals(isTransfer)||"B".equals(isTransfer)){
						String traceCode=loanTrace.getStr("traceCode");
						List<LoanTransfer> traceTransfers=loanTransferService.getLoanTransfer8User(traceCode, "B", userCode);
						boolean checkusertranfer=checkusertranfer(traceTransfers, date, loanTrace, traceCode, userCode);
						if(checkusertranfer){
							list.add(loanTrace);
						}
					}
					}
				}
			}
		}
		return succ("获取成功", list);
	}
	/**
	 * 搜索用户指定日期回款详情 ws 20170914
	 * */
	@ActionKey("/BackDetil8Day")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message backDetil8Day(){
		String userCode=getUserCode();
		String day=getPara("day");
		String nowdd=day.substring(6, 8);
		int nowym=Integer.parseInt(day.substring(0,6));
		List<LoanTrace> loanTraces = loanTraceService.queryAllLoanTrace(userCode,day);
		List<Map<String, Object>> list=new ArrayList<Map<String, Object>>();
		long allbx=0;long allben=0;
		for(LoanTrace loanTrace:loanTraces){
			String loanCode=loanTrace.getStr("loanCode");
			String loanDateTime=loanTrace.getStr("effectDate");
			String loandd=loanDateTime.substring(6, 8);
			int days=DateUtil.getDaysByYearMonth(day);
			if(days<Integer.parseInt(loandd)){
				loandd=days+"";
			}
			if(nowdd.equals(loandd)){
			int loanlimit=loanTrace.getInt("loanTimeLimit");
			int ym=Integer.parseInt(loanDateTime.substring(0, 6));
			if(ym<nowym){
				int year=ym/100;
				int month=ym%100;
				int a=(month+loanlimit)/12;
				int b=(month+loanlimit)%12;
				int ym2=(year+a)*100+b;
				String loanState=loanTrace.getStr("loanState");
				String isTransfer=loanTrace.getStr("isTransfer");
				if("N".equals(loanState)||"O".equals(loanState)){
					SettlementEarly settlementEarly=null;
//					if("N".equals(loanState)){
//						settlementEarly=settlementEarlyService.queryearly(loanCode);
//						if(null!=settlementEarly){
//							if("A".equals(settlementEarly.getStr("estatus"))){
//							int earlyLimit = settlementEarly.getInt("earlyLimit");
//							a=(month+earlyLimit)/12;
//							b=(month+earlyLimit)%12;
//							ym2=(year+a)*100+b;
//							}
//						}}
					if(ym2>=nowym){
						if("C".equals(isTransfer)){
							Map<String, Object> loanmap=getbackbx(loanTrace, day,loanState,settlementEarly);
							long ben=Long.parseLong(loanmap.get("ben").toString());
							long xi=Long.parseLong(loanmap.get("xi").toString());
							allben+=ben;
							allbx+=ben+xi;
							loanmap.put("ben", Number.longToString(ben));
							loanmap.put("xi", Number.longToString(xi));
							list.add(loanmap);
						}
						if("A".equals(isTransfer)||"B".equals(isTransfer)){
							String traceCode=loanTrace.getStr("traceCode");
							List<LoanTransfer> traceTransfers=loanTransferService.getLoanTransfer8User(traceCode, "B", userCode);
							boolean checkusertranfer=checkusertranfer(traceTransfers, nowym, loanTrace, traceCode, userCode);
							if(checkusertranfer){
								Map<String, Object> loanmap=getbackbx(loanTrace, day,loanState,settlementEarly);
								long ben=Long.parseLong(loanmap.get("ben").toString());
								long xi=Long.parseLong(loanmap.get("xi").toString());
								allben+=ben;
								allbx+=ben+xi;
								loanmap.put("ben", Number.longToString(ben));
								loanmap.put("xi", Number.longToString(xi));
								list.add(loanmap);
							}
						}
					}
					}
				if("P".equals(loanState)){
					int loanRecyDate=Integer.parseInt(loanTrace.getStr("loanRecyDate").substring(0, 6));
					if(loanRecyDate>=nowym){
						if("C".equals(isTransfer)){
							Map<String, Object> loanmap=getbackbx(loanTrace, day,loanState,null);
							long ben=Long.parseLong(loanmap.get("ben").toString());
							long xi=Long.parseLong(loanmap.get("xi").toString());
							allben+=ben;
							allbx+=ben+xi;
							loanmap.put("ben", Number.longToString(ben));
							loanmap.put("xi", Number.longToString(xi));
							list.add(loanmap);
						}
						if("A".equals(isTransfer)||"B".equals(isTransfer)){
							String traceCode=loanTrace.getStr("traceCode");
							List<LoanTransfer> traceTransfers=loanTransferService.getLoanTransfer8User(traceCode, "B", userCode);
							boolean checkusertranfer=checkusertranfer(traceTransfers, nowym, loanTrace, traceCode, userCode);
							if(checkusertranfer){
								Map<String, Object> loanmap=getbackbx(loanTrace, day,loanState,null);
								long ben=Long.parseLong(loanmap.get("ben").toString());
								long xi=Long.parseLong(loanmap.get("xi").toString());
								allben+=ben;
								allbx+=ben+xi;
								loanmap.put("ben", Number.longToString(ben));
								loanmap.put("xi", Number.longToString(xi));
								list.add(loanmap);
							}
						}
					}
					}
				}
		}
			}
		Map<String, Object> detilemap=new HashMap<String, Object>();
		detilemap.put("list", list);
		detilemap.put("allbx", Number.longToString(allbx));
		detilemap.put("allben", Number.longToString(allben));
		detilemap.put("allxi", Number.longToString(allbx-allben));
		return succ("获取成功", detilemap);
	}
	/**
	 * 统计用户回款信息
	 * @return
	 */
	@ActionKey("/countBackInfo4User")
	@AuthNum(value=999)
	@ResponseCached(cachedKey="countBackInfo4User", cachedKeyParm="date|@userCode",mode="remote" , time=5)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message countBackInfo4User(){
		String date = getPara("date");
		if(StringUtil.isBlank(date)){
			return error("01", "参数错误", "");
		}
		String userCode = getUserCode();
		Object[] countByBackDate = loanTraceService.countByBackDate(date, userCode);
		long countByBackMonth = loanTraceService.countByBackMonth(userCode);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("count4Date", countByBackDate[0]);
		map.put("count4Amount", countByBackDate[1]);
		map.put("count4Interest", countByBackDate[2]);
		map.put("count4Month", countByBackMonth);
		return succ("获取成功", map);
	}
	
	
	/**
	 * 获取我的最近投资
	 * @param pageNumber
	 * @param pageSize
	 * @param result
	 * @return
	 */
	@ActionKey("/queryInvest4Latest")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryInvest4Latest(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		
		//获取用户标识
		String userCode = getUserCode();
		
		Page<LoanTrace> loanTraces = loanTraceService.queryInvest4Latest(pageNumber, pageSize,userCode);
		
		return succ("获取成功", loanTraces);
	}
	
//	/**
//	 * 查询用户是否开启自动投标
//	 * @return
//	 */
//	@ActionKey("/queryAutoLoanState")
//	@AuthNum(value=999)
//	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
//	public Message queryAutoLoanState(){
//		String userCode = getUserCode();
//		
//		//查询自动投标开启状态
//		AutoLoan_v2 autoLoan = autoLoanService.findByUserCode(userCode,"A");
//		//Long autoIndex = autoLoanService.getAutoIndex(userCode);
//		Map<String, Object> result = new HashMap<String, Object>();
//		//result.put("autoIndex", autoIndex);
//		int isAvailable = 0;
//		if(autoLoan != null){
//			isAvailable = 1;
//		}
//		result.put("isAvailable", isAvailable);
//		//获取可用余额
//		long avBalance = fundsServiceV2.findAvBalanceById(userCode);
//		
//		result.put("avBalance", avBalance);
//		return succ("查询完成", result);
//	}
	
	
//	/**
//	 * 停用自动投标
//	 * @return
//	 */
//	@ActionKey("/setAutoLoanState")
//	@AuthNum(value=999)
//	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
//	public Message setAutoLoanState(){
//		String userCode = getUserCode();
//		autoLoanService.stopAutoLoan_v2(userCode);
//		//记录日志
//		BIZ_LOG_INFO(userCode, BIZ_TYPE.AUTOLOAN, "设置自动投标状态成功");
//		return succ("成功关闭自动投标", "");
//	}
	
	/**
	 * 停用自动投标
	 * @return
	 */
	@ActionKey("/setAutoLoanState")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message setAutoLoanState(){
		String userCode = getUserCode();
		autoMapService.changeAutoState2C(userCode);
		//记录日志
		BIZ_LOG_INFO(userCode, BIZ_TYPE.AUTOLOAN, "设置自动投标状态成功");
		return succ("成功关闭自动投标", "");
	}
	
	/**
	 * 查询自动投标配置设定
	 * @return
	 */
	@ActionKey("/queryAutoLoanSettings")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryAutoLoanSettings(){
		String userCode = getUserCode();
		AutoLoan_v2 autoLoan_v2 = autoLoanService.findByUserCode(userCode);
//		long totalAmount = 0;
//		long rankIndex = 0;
//		long rankTotal = 0;
//		if(autoLoan_v2 != null){
//			Long[] queryRank = autoLoanService.queryRank(userCode);
//			totalAmount = queryRank[0];
//			rankIndex = queryRank[1];
//			rankTotal = queryRank[2];
//		}
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("autoLoan", autoLoan_v2);
//		map.put("totalAmount", totalAmount);//排队金额
//		map.put("rankIndex", rankIndex);//我的排队号
//		map.put("rankTotal", rankTotal);//排队金额
		return succ("查询完成", map);
	}
	
	/**
	 * 查询自动投标排位明细
	 * @return
	 */
	@ActionKey("/queryAutoLoanRankNum")
	@AuthNum(value=999)
//	@ResponseCached(cachedKey="queryAutoLoanRankNum", cachedKeyParm="@userCode",mode="remote" , time=1)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryAutoLoanRankNum(){
		int x = 0;
		try {
			String userCode = getUserCode();
			x = autoMapService.queryRankVal(userCode);
		} catch (Exception e) {
			x = 0;
		}
		return succ("查询完成", x);
	}
	
	/**
	 * 查询自动投标排位明细
	 * @return
	 */
	@ActionKey("/queryAutoLoanRankDetail")
	@AuthNum(value=999)
	//@ResponseCached(cachedKey="queryAutoLoanRankDetail", cachedKeyParm="@userCode",mode="remote" , time=1)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryAutoLoanRank(){
		String userCode = getUserCode();
		Map<String,Object> result = new HashMap<String, Object>();
		if(autoMapService.validateAutoState(userCode) != 1){
			result.put("rankNum", -1);
			result.put("rankDetail", null);
		}else{
			int rankVal = autoMapService.queryRankVal(userCode);
			if(rankVal>0){
				int rankNum = autoMapService.queryRankNum(rankVal);
				AutoLoan_v2 aa = autoLoanService.findByUserCode(userCode, "A");
				List<Record> list = autoMapService.queryRankDetail(rankVal,aa.getInt("autoMinLim"),aa.getInt("autoMaxLim"));
				result.put("rankNum", rankNum);
				result.put("rankDetail", list);
			}else{
				result.put("rankNum", -1);
				result.put("rankDetail", null);
			}
		}
		return succ("查询完成", result);
	}
	
	/**
	 * 保存自动投标配置
	 * @return
	 */
	@ActionKey("/saveAutoLoanSettings")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message saveAutoLoanSettings(){
		
		AutoLoan_v2 autoLoan = getModel(AutoLoan_v2.class,"autoLoan");
		
		//验证数据有效性
		if(null == autoLoan){
			return error("01", "请正确填写自动投标信息", "");
		}
		
		if(autoLoan.getLong("onceMaxAmount") < 5000){
			autoLoan.set("onceMaxAmount", 999999900L);
		}
		if(autoLoan.getLong("onceMinAmount") < 5000){
			autoLoan.set("onceMinAmount", 5000L);
		}
		if(autoLoan.getLong("onceMaxAmount") < 5000){
			return error("01", "最大金额必须大于50", "");
		}
		if(autoLoan.getLong("onceMinAmount") < 5000){
			return error("01", "最小投标金额必须大于50", "");
		}
		if(autoLoan.getLong("onceMinAmount") > autoLoan.getLong("onceMaxAmount")){
			return error("01", "最小投标金额不能大于最大投标金额", "");
		}
		
		if(StringUtil.isBlank(autoLoan.getStr("productType"))){
			autoLoan.set("productType", "");
		}
		
		String priorityMode = getPara("priorityMode","N");
		
		String useTicket = getPara("useTicket","N");
		
		String autoType = "B";
		
		try {
			autoType = autoLoan.getStr("autoType");
			if(StringUtil.isBlank(autoType)){
				autoType = "B";
			}
		} catch (Exception e) {
			autoType = "B";
		}
		try {
			if(useTicket.equals("A")){
				if(StringUtil.isBlank(priorityMode)){
					priorityMode = "A";
				}
				if(priorityMode.equals("A") == false && priorityMode.equals("B") == false){
					priorityMode = "A";
				}
			}
		} catch (Exception e) {
			
		}
		//保存
		String userCode = getUserCode();
		String userName = "";
		try {
			userName = userService.findByField(userCode, "userName").getStr("userName");
			if(StringUtil.isBlank(userName)){
				return error("21", "用户名异常",false);
			}
		} catch (Exception e) {
			return error("21", "用户名异常",false);
		}
		autoLoan.set("userCode", userCode);
		autoLoan.set("productType", "ABCD");
		int fff =1;
		try {
			fff = autoMapService.validateAutoState(userCode);
		} catch (Exception e) {
			fff = 1;
		}
		boolean result = autoMapService.saveAutoLoanSettings(userCode, userName, autoLoan.getLong("onceMinAmount"), autoLoan.getLong("onceMaxAmount"), autoLoan.getInt("autoMinLim"), autoLoan.getInt("autoMaxLim"), autoLoan.getStr("refundType"), autoLoan.getStr("productType"),priorityMode,useTicket,autoType);
		if(result == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.AUTOLOAN, "保存自动投标配置失败", null);
			return error("01", "保存失败", "");
		}
		try {
			if(fff==0){
				String nowDate = DateUtil.getNowDate();
				int x = DateUtil.compareDateByStr("yyyyMMdd",nowDate,"20161211" );
				int y = DateUtil.compareDateByStr("yyyyMMdd",nowDate,"20161218" );
				if((x == 0 || x == 1) && (y == -1 || y == 0)){
					//11张30元券+11张50元券
					for (int i = 0; i < 11; i++) {
						ticketService.saveADV(userCode, "30元现金抵扣券", DateUtil.addDay(DateUtil.getNowDate(), 30), 3000, 500000);
						ticketService.saveADV(userCode, "50元现金抵扣券", DateUtil.addDay(DateUtil.getNowDate(), 30), 5000, 1000000);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.AUTOLOAN, "首次保存自动投标送券异常", e);
		}
		String info="";
		info+="最小金额:"+autoLoan.getLong("onceMinAmount");
		info+="|最大金额:"+autoLoan.getLong("onceMaxAmount");
		info+="|最小期限:"+autoLoan.getInt("autoMinLim");
		info+="|最大期限:"+autoLoan.getInt("autoMaxLim");
		info+="|还款方式:"+autoLoan.getStr("refundType");
		info+="|自动投标类型:"+autoLoan.getStr("autoType");
		info+="|是否使用现金券:"+useTicket;
		info+="|现金券使用优先方式:"+priorityMode;
		BIZ_LOG_INFO(userCode, BIZ_TYPE.AUTOLOAN, "保存自动投标配置成功",info);
		
		return succ("保存成功", "");
	}
	
	/**
	 * 保存自动投标配置
	 * @return
	 */
	@ActionKey("/addAutoLoanTickets")
	@AuthNum(value=999)
	@Before({PkMsgInterceptor.class})
	public Message addAutoLoanTickets(){
		String sckey = getPara("sckey","");
		if(sckey.equals("pi3.1415926535898") == false){
			return error("00000000000000", "", false);
		}
		String userCode = getPara("pUserCode");
		
//		boolean validateDate = false;
//		String nowDate = DateUtil.getNowDate();
//		int x = DateUtil.compareDateByStr("yyyyMMdd",nowDate,"20161211" );
//		int y = DateUtil.compareDateByStr("yyyyMMdd",nowDate,"20170110" );
//		if((x == 0 || x == 1) && (y == -1 || y == 0)){
//			validateDate = true;
//		}
//		if(validateDate==false){
//			return error("98", "时间过了", false);
//		}
		int fff = autoMapService.validateAutoState(userCode);
		//第一次保存
		if(fff==0){
			//11张30元券+11张50元券
			for (int i = 0; i < 11; i++) {
				ticketService.saveADV(userCode, "30元现金抵扣券", DateUtil.addDay(DateUtil.getNowDate(), 30), 3000, 500000);
				ticketService.saveADV(userCode, "50元现金抵扣券", DateUtil.addDay(DateUtil.getNowDate(), 30), 5000, 1000000);
			}
			return succ("ok", true);		
		}
		return error("99", "不是处了", false);
	}
	
	
	
//	/**
//	 * 保存自动投标配置
//	 * @return
//	 */
//	@ActionKey("/saveAutoLoanSettings")
//	@AuthNum(value=999)
//	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
//	public Message saveAutoLoanSettings(){
//		
//		AutoLoan_v2 autoLoan = getModel(AutoLoan_v2.class,"autoLoan");
//		
//		//验证数据有效性
//		if(null == autoLoan){
//			return error("01", "请正确填写自动投标信息", "");
//		}
//		if(autoLoan.getLong("onceMaxAmount") < 5000){
//			autoLoan.set("onceMaxAmount", 999999999L);
//		}
//		if(autoLoan.getLong("onceMinAmount") < 5000){
//			autoLoan.set("onceMinAmount", 5000L);
//		}
//		if(autoLoan.getLong("onceMaxAmount") < 5000){
//			return error("01", "最大金额必须大于50", "");
//		}
//		if(autoLoan.getLong("onceMinAmount") < 5000){
//			return error("01", "最小投标金额必须大于50", "");
//		}
//		if(autoLoan.getLong("onceMinAmount") > autoLoan.getLong("onceMaxAmount")){
//			return error("01", "最小投标金额不能大于最大投标金额", "");
//		}
//		
//		if(StringUtil.isBlank(autoLoan.getStr("productType"))){
//			autoLoan.set("productType", "");
//		}
//		
//		//保存
//		String userCode = getUserCode();
//		autoLoan.set("userCode", userCode);
//		boolean result = autoLoanService.saveOrUpdateAutoLoan_v2(autoLoan);
//		if(result == false){
//			BIZ_LOG_ERROR(userCode, BIZ_TYPE.AUTOLOAN, "保存自动投标配置失败", null);
//			return error("01", "保存失败", "");
//		}
//		BIZ_LOG_INFO(userCode, BIZ_TYPE.AUTOLOAN, "保存自动投标配置成功");
//		return succ("保存成功", "");
//	}

	
	
	/**
	 * 投标
	 * @param loancode		标书编码
	 * @param usercode		投标人用户编码
	 * @param amounts		投标金额
	 * @return 				返还标书剩余额度
	 */
	@ActionKey("/bidding")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message bidding(){
		User user = userService.findById(getUserCode());
		String loanCode = getPara("loanCode") ;
		
//		LoanInfo loanInfo = loanInfoService.findById(loanCode);
//		int benefits4new = loanInfo.getInt("benefits4new");
//		if (benefits4new <= 0) {
//			return error("99", "暂不支持手动投标", null );
//		}
				
		long amount = 0;
		try {
			amount = getParaToLong("payAmount",(long) 0);
		} catch (Exception e) {
			return error("21", "投标金额错误[" + getPara("payAmount")+"]", null );
		}
		if(user.getStr("loginId")==null ||("").equals(user.getStr("loginId"))||"null".equals(user.getStr("loginId"))){
			
			return error("01", "未开通存管账户，无法进行投标操作!", null ) ;
		}
		if( amount <= 0 ){
			return error("30", "投标金额错误!", null ) ;
		}
		if( StringUtil.isBlank( loanCode ) == true ){
			return error("31", "参数错误!", null ) ;
		}
		if( loanCode.length() != 32){
			return error("32", "参数错误!", null ) ;
		}
		String ticketCodes = "";
		try {
			ticketCodes = getPara("ticket","");
		} catch (Exception e) {
			ticketCodes = "";
		}

		return doLoan4bidding( loanCode , amount , user,"M" , 0 ,ticketCodes , 0 ) ;
	}
	
	/**
	 * 	
	 * 	新增参数 ticketCode
	 * @param loanCode
	 * @param amount
	 * @param user
	 * @param loantype
	 * @param rankValue
	 * @param autoOnceAmount
	 * @param ticketCode
	 * @param userAgent
	 * @return
	 */
	public Message doLoan4bidding(String loanCode , long amount , 
			User user,String loantype ,long rankValue , String ticketCodes ,long onceMinAmount ){
		
		String userCode = user.getStr("userCode") ;
		//验证是否开通存管 ws 20170818
		if(null==user.getStr("loginId")||"".equals(user.getStr("loginId"))||"null".equals(user.getStr("loginId"))){
			return error("21", "用户还未激活存管账户", "");
		}
		//用户资金验证
		Funds funds = fundsServiceV2.findById(userCode);
		QueryBalanceResultData fuiouFunds =	fuiouTraceService.BalanceFunds(user);
		if (funds.getLong("avBalance") != Long.parseLong(fuiouFunds.getCa_balance()) || 
				funds.getLong("frozeBalance") != Long.parseLong(fuiouFunds.getCf_balance())) {
			return error("20", "用户资金异常", "");
		}
		//end
		LoanInfo loan = loanInfoService.findById(loanCode) ;

		//判断标书是否存在并状态是否正常
		if( loan == null || "J".equals(loan.getStr("loanState")) == false ){
			return error("02", "未找到相关标信息", null ) ;
		}
		/*
		 * 	1,检查标设置
		 * 	2,判断用户是否负责投标条件
		 * 	3,投标
		 */
		int minLoanAmount = loan.getInt("minLoanAmount");
		long loanBalance = loan.getLong("loanBalance");
		
		//判断是否满标
		if( loanBalance <= 0 ){
			return error("03", "已满标，请查看其他标", null ) ;
		}
		
		//检查是否已经到投标时间
		String releaseDateTime = loan.getStr("releaseDate")+loan.getStr("releaseTime");
		if( "M".equals(loantype) == true ){
			int compareDateByStr = DateUtil.compareDateByStr("yyyyMMddHHmmss",
					DateUtil.getNowDateTime(), releaseDateTime);
			if(compareDateByStr != 0 && compareDateByStr != 1){
				return error("09", "未到投标时间，请查看其他标", null );
			}
		}else{
			//rankValue = autoLoanService.queryRank(userCode)[1];
			//rankValue = AutoLoan_v2.autoLoanDao.findFirst("select * from t_auto_loan_v2 where userCode=?",userCode).getInt("aid");
		}
		
		/*
		 *	增加新手标检查
		 *		1、通过判断benefits4new 判断该为是否为新手标
		 *		2、判断当前时间是否为发标时间9点以后，如果是，则不坐新手限制。
		 *		3、新手限制条件，判断用户活跃积分是否小于100，小于等于100则为新手
		 */
		int benefits4new = loan.getInt("benefits4new");
		if( benefits4new > 0 ){
			int rewardRateByYear = loan.getInt("rewardRateByYear");
			//检查是否过了不限制的时间
			String passTime = "213000";//默认晚9点半后不限制投新手标
			try {
				passTime = (String) CACHED.get("S3.xsbgqsj");
			} catch (Exception e) {
				
			}
			//String openDateTime = DateUtil.getNowDate() + passTime;
			String openDateTime = loan.getStr("releaseDate") + passTime;
			int compareDateByStr = -1;
			compareDateByStr = DateUtil.compareDateByStr("yyyyMMddHHmmss",
					DateUtil.getNowDateTime(), openDateTime);
			if(compareDateByStr<1){
				long userScore = user.getLong("userScore");
				int tmp = 3000;
				try {
					tmp = tmp * Integer.valueOf((String) CACHED.get("S3.xsjfbs"));
				} catch (Exception e) {
				}
				if( userScore >= tmp ){
					return error("15", "此标为新人专享", null ) ;
				}
			}
			loan.set("rewardRateByYear", (rewardRateByYear + benefits4new ) ) ;	//将新手奖励增加到奖励年利率里
		}
		
		
		/**
		 * 	TODO 解析券，记录券信息
		 */
		List<Tickets> tickets = new ArrayList<Tickets>();//所有类型券的集合
		int ticketAmount = 0 ;//现金券的抵扣金额
		long exAmount = 0;//现金券的使用条件，最少投资金额,默认0
		if( StringUtil.isBlank(ticketCodes) == false ){
			String[] tcs = ticketCodes.split(",");
			if(tcs!=null && tcs.length > 0 ){
				for (int i = 0; i < tcs.length; i++) {
					Tickets ticket = ticketService.findByCode2(tcs[i]);
					if( ticket != null ){
						tickets.add(ticket);
						if(ticket.getStr("ttype").equals("A")){
							ticketAmount = ticketAmount + ticket.getInt("amount");
							String strUseEx = ticket.getStr("useEx");
							if( StringUtil.isBlank(strUseEx) == false ){
								JSONObject json = JSONObject.parseObject( strUseEx ) ;
								int limit = json.getIntValue("limit");
								int rate = json.getIntValue("rate");
								long tmp = json.getLongValue("amount") ;
								if(tmp!=0 && amount < tmp){
									return error("77", "请检查理财券使用金额是否符合条件", false);
								}
								if(limit != 0 && loan.getInt("loanTimeLimit") < limit){
									return error("77", "请检查理财券使用期限是否符合条件", false);
								}
								if(rate != 0 && (loan.getInt("rateByYear") + loan.getInt("rewardRateByYear")) < rate ){
									return error("77", "请检查理财券使用利率是否符合条件", false);
								}
								//判断是否符合券可投标期限 20170727 ws
								String la=String.valueOf(loan.getInt("loanTimeLimit"));
								if(la.length()==1){
									la="0"+la;
								}
								if(null!=ticket.getStr("loanMonth")&&ticket.getStr("loanMonth").length()>1&&ticket.getStr("loanMonth").indexOf(la)<0){
									return error("77", "请检查理财券使用标期是否符合条件", false);
								}
								//end
								if(tmp > exAmount){
									exAmount = tmp;
								}
							}
						}
					}
				}
			}
		}
		
		//去小数
		amount = amount - amount%100 ;
		
		//真实投标金额(投标金额-券金额)
		long trueAmount = amount-ticketAmount;
		
		long avBalance = Funds.fundsDao.findByIdLoadColumns(userCode, "avBalance").getLong("avBalance");
		if(avBalance < trueAmount){
			return error("999", "可用余额不足!", null);
		}
		
		int maxLoanAmount = loan.getInt("maxLoanAmount");
		if( maxLoanAmount > 0 && amount > maxLoanAmount ){
			//如果最大投标金额 小于 其中一个现金券的使用条件金额
			if(tickets != null && tickets.size() > 0){
				if(maxLoanAmount < exAmount){
					return error("05", "可投金额不足,无法使用该券!","") ;
				}
			}
			//重新计算投标金额+券金额
			//自动投标不受标限制限制,贝贝要求的
			if( loantype.equals("A") == false )
				amount = maxLoanAmount;
			trueAmount =  amount - ticketAmount;
		}
		
		
		//投标金额小于最小投标金额时返回错误
		if( amount < minLoanAmount && loanBalance >= minLoanAmount){
			return error("04", "投标金额最小要求为：" + minLoanAmount/10/10 + "元", minLoanAmount ) ;
		}
		
		//当可投金额小于投标金额时, 自动将可投金额置为投标金额
		if( amount > loanBalance ){
			if(tickets != null && tickets.size() > 0){
				if(loanBalance < exAmount){
					return error("05", "可投金额不足,无法使用该券!","") ;
				}
			}
			//TODO 当为自动投标时，不做余额兼容，不投出有设有最小投标金额的
//			if( loantype.equals("A") == true )
//				return error("14", "投标金额最小要求为：" + minLoanAmount/10/10 + "元", minLoanAmount ) ;
			//重新计算投标金额+券金额
			amount = loanBalance ;
			
			if( onceMinAmount > amount ){
				return error("14", "单次投标金额不满足最小投标金额要求", minLoanAmount ) ;
			}
			
			trueAmount = amount - ticketAmount;
		}
		
		int maxLoanCount = loan.getInt("maxLoanCount");
		Map<String , Long> totalMap = loanTraceService.totalByLoan4user(loanCode , userCode );
		long userLoanCount = totalMap.get("count") ;
		long userTotalAmount = totalMap.get("totalAmount");
		if( userLoanCount > maxLoanCount ){
			return error("06", "投标次数已超限,当前最大投标次数：" + maxLoanCount + "次", maxLoanCount ) ;
		}
		
		//验证投标总额
		if( (userTotalAmount + amount) > maxLoanAmount ){
			amount = maxLoanAmount - userTotalAmount ;
			trueAmount = amount - ticketAmount;
			if( amount <= 0 ){
				return error("07", "投标总额已超，您的该标的投资总额为：" + userTotalAmount/10/10 + "元" , userTotalAmount) ;
			}
		}
		
//		int zdjl = 0;//自动投标奖励利率
//		if( "A".equals( loantype ) == true ){
//			if( autoOnceAmount > amount ){
//				return error("21", "投标金额不符" , "" ) ;
//			}
//			try {
//				int x = loan.getInt("loanTimeLimit");
//				if(x>=1 && x <=6){
//					zdjl = Integer.valueOf( (String) CACHED.get("S1.autoLoanRate16"));
//				}else if(x >= 7 && x<=18){
//					zdjl = Integer.valueOf( (String) CACHED.get("S1.autoLoanRate718"));
//				}
//				
//			} catch (Exception e) {
//				e.printStackTrace();
//				zdjl = 0;
//			}
//		}
		//TODO 更新现金券使用状态
		try {
			if( tickets!=null && tickets.size() > 0){
				for (int i = 0; i < tickets.size(); i++) {
					Tickets tts = tickets.get(i);
					if(tts.getStr("ttype").equals("A")){
						Tickets tmp = ticketService.useTicket4A(userCode, tts.getStr("tCode"), amount, loan ) ;
						if( tmp == null ){
							return error("10", "现金券异常:"+tts.getStr("tCode"),"") ;
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return error("10", "理财券异常","") ;
		}
		
//		if( amount > ticketAmount)
//			amount = amount - ticketAmount ;
		/*
		 * 	1，可用资金转冻结资金
		 * 	2，减少标可用余额，失败回滚资金操作，成功增加流水
		 * 	3，增加资金流水，增加投标流水
		 */
		//操作失败则会抛出异常
		
		Funds afterFunds = null;
		boolean bidResult = false;
		try{
			
//			int ydjl = 0;
			String userAgent = "";
			try {
				userAgent  = getRequest().getHeader( "USER-AGENT" ).toLowerCase(); 
			} catch (Exception e) {
				userAgent = "";
			}
			if(null == userAgent){    
	            userAgent = "";    
	        }
	        //判断是否为移动端访问  
	        if( CommonUtil.check(userAgent)){  
	        	//ydjl = 20;
	        	loantype = "N";
	        }
			
			//可用余额转冻结余额
	        afterFunds = fundsServiceV2.avBalance2froze(userCode, trueAmount );
	    	//投标 冻结投资人账户余额 2017.5.26 rain  
	    	CommonRspData commonRspDataTender=fuiouTraceService.freeze(user, trueAmount);
			if( ("0000").equals(commonRspDataTender.getResp_code())){
				
//				if(loanBalance-amount<1){
//					loanInfoService.updateLoanByFull(loanCode);//如果投满了，设置满标
//				} 
				//TODO 预投标资金流水，备注信息会记录抵扣金额
				//TODO 单个现金券会记录到投标流水
				bidResult = loanInfoService.update4prepareBid( loan, amount,
						userCode , loantype , rankValue , tickets,0) ;
				if(bidResult == true){
					//投标成功，记录资金流水
					fundsTraceService.bidTrace(userCode , amount, afterFunds.getLong("avBalance"), 
							afterFunds.getLong("frozeBalance"), 0 ,ticketAmount );
					//手动投标发送短信
					if(loantype.equals("A") == false){
						try {
							String mobile = userService.getMobile(userCode);
							
							String content = CommonUtil.SMS_MSG_MLOAN.replace("[userName]", user.getStr("userName")).replace("[loanNo]", loan.getStr("loanNo"))
									.replace("[payAmount]", CommonUtil.yunsuan(amount+"", "100", "chu", 2).doubleValue()+"");
							SMSLog smsLog = new SMSLog();
							smsLog.set("mobile", mobile);
							smsLog.set("content", content);
							smsLog.set("userCode", userCode);
							smsLog.set("userName", user.getStr("userName"));
							smsLog.set("type", "12");smsLog.set("typeName", "手动投标");
							smsLog.set("status", 9);
							smsLog.set("sendDate", DateUtil.getNowDate());
							smsLog.set("sendDateTime", DateUtil.getNowDateTime());
							smsLog.set("break", "");
							smsLogService.save(smsLog);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					return succ("投标成功,投标金额：" + trueAmount/10.0/10.0 + "元", null );
				}else{
					fuiouTraceService.unFreeFunds(user, trueAmount);
					fundsServiceV2.frozeBalance2avBalance(userCode, trueAmount );
					if(tickets != null && tickets.size() > 0){
						for (int i = 0; i < tickets.size(); i++) {
							//代金券回滚
							ticketService.rollBackTicket(tickets.get(i).getStr("tCode"));
						}
					} 
//					return error("21", "投标流水添加失败", "");
					return error("21", "投标失败", "");
				}
			}else{
				//操作失败，解冻投资人的金额  2017.6.7 rain
				//冻结资金回滚
				fundsServiceV2.frozeBalance2avBalance(userCode, trueAmount );
				if(tickets != null && tickets.size() > 0){
					for (int i = 0; i < tickets.size(); i++) {
						//代金券回滚
						ticketService.rollBackTicket(tickets.get(i).getStr("tCode"));
					}
				} 
				return error("08", "存管系统异常，投标失败" , null);
			}
		}catch(Exception e){
			e.printStackTrace( );
			return error("EX", "操作异常:" + e.getMessage() , null ) ;
		}
		
	}
	
	/**
	 * 我要理财页面-分页及条件查询标书投资项目
	 * @param pageNumber
	 * @param pageSize
	 * @param result
	 * @return
	 */
	@ActionKey("/queryFinancialBid")
	@AuthNum(value=999)
	@Before({PkMsgInterceptor.class})
	@ResponseCached(cachedKey="t_queryFinancialBid", cachedKeyParm="pageNumber|pageSize|type|minLimit|maxLimit|productType",mode="remote" , time=2)
	public Message queryFinancialBid(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		String type = getPara("type");
		String minLimit = getPara("minLimit");
		String maxLimit = getPara("maxLimit");
		
		String productType = getPara("productType","");
		
		String loanState = "J,M,N,O,P,Q,R";
		
		Page<LoanInfo> loanInfos = loanInfoService.findByPortal(pageNumber, pageSize,loanState,type,productType,minLimit,maxLimit);
		//转让中债权总数
		Integer count = loanTransferService.queryTransferCount("A");
		
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("loanInfos", loanInfos);
		map.put("serverTime", DateUtil.getNowDateTime());
		map.put("transferCount", count);
		return succ("获取成功", map);
	}
	
	
	/**
	 * 我要理财页面-查询详细的标书信息页面(已经登录)
	 * @return
	 */
	@ActionKey("/queryBidDetail")
	@AuthNum(value=999)
	@ResponseCached(cachedKey="queryBidDetail", cachedKeyParm="loanCode|@userCode",mode="remote" , time=2)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryBidDetail(){
		String loanCode = getPara("loanCode");
		String userCode = getUserCode();
		return queryBidDetail(userCode,loanCode);
	}
	
	/**
	 * 我要理财页面-查询详细的标书信息页面(未登录)
	 * @return
	 */
	@ActionKey("/queryBidDetailNoLogin")
	@Before({PkMsgInterceptor.class})
	@ResponseCached(cachedKey="queryBidDetailNoLogin", cachedKeyParm="loanCode",mode="remote" , time=2)
	public Message queryBidDetailNoLogin(){
		String loanCode = getPara("loanCode");
		return queryBidDetail(null,loanCode);
	}
	
	/**
	 * 我要理财-标书详情页面查询投标记录
	 * @return
	 */
	@ActionKey("/queryLoanTrace")
	@AuthNum(value=999)
	@Before({PkMsgInterceptor.class})
//	@ResponseCached(cachedKey="queryLoanTrace", cachedKeyParm="loanCode",mode="remote" , time=1)
	public Message queryLoanTrace(){
		
		String loanCode = getPara("loanCode");
		if(StringUtil.isBlank(loanCode)){
			return error("01", "参数错误", "");
		}
		
		LoanInfo loanInfo = new LoanInfo();
		loanInfo = loanInfoService.findById(loanCode);
		
		List<LoanTrace> listLoanTrace = LoanTrace.loanTraceDao.find(
				"select * from t_loan_trace where loanCode = ? order by loanDateTime asc", loanCode);
		
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("loanAmount", loanInfo.getLong("loanAmount"));
		map.put("loanBalance", loanInfo.getLong("loanBalance"));
		map.put("releaseDate", loanInfo.getStr("releaseDate"));
		map.put("releaseTime", loanInfo.getStr("releaseTime"));
		map.put("effectDate", loanInfo.getStr("effectDate"));
		map.put("effectTime", loanInfo.getStr("effectTime"));
		map.put("traces", listLoanTrace);
		
		return succ("获取成功", map);
	}
	
	
	/**
	 * 查询可转让债权
	 * @param remark
	 * @return
	 */
	@ActionKey("/queryCanTransferList")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryCanTransferList(){
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		
		//获取用户标识
		String userCode = getUserCode();
		
		Page<LoanTrace> loanTraces = loanTraceService.findCanTransfer(pageNumber, pageSize,userCode);
		
		return succ("获取成功", loanTraces);
	}

	
	/**
	 * 查询一周内应回收欠款列表
	 * @return
	 */
	@ActionKey("/queryLoanInfo4Week")
	@Before({PkMsgInterceptor.class})
	@ResponseCached(cachedKey="queryLoanInfo4Week", cachedKeyParm="date|pageNumber|pageSize",mode="remote" , time=3)
	public Message queryLoanInfo4Week(){
		String date = getPara("date");
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();

		Page<LoanInfo> loanInfos = loanInfoService.findLoanInfo4Week(pageNumber,pageSize, date);
		
		return succ("查询成功", loanInfos);
	}
	
	
	/**
	 * 逾期已归还列表
	 * @return
	 */
	@ActionKey("/queryOverdueTrace4yes")
	@Before({PkMsgInterceptor.class})
//	@ResponseCached(cachedKey="queryOverdueTrace4yes", cachedKeyParm="pageNumber|pageSize",mode="remote" , time=60*60)
	public Message queryOverdueTrace4yes(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		
		Page<LoanOverdue> loanOverdues = LoanOverdue.overdueTraceDao.paginate(pageNumber, pageSize, 
				"select * ", "from t_loan_overdue where disposeStatus = 'y' order by disposeDateTime desc");
		
		return succ("查询成功", loanOverdues);
		
	}
	
	/**
	 * 逾期列表
	 * @return
	 */
	@ActionKey("/queryOverdueTrace30")
	@Before({PkMsgInterceptor.class})
//	@ResponseCached(cachedKey="queryOverdueTrace30", cachedKeyParm="pageNumber|pageSize|type",mode="remote" , time=60*60)
	public Message queryOverdueTrace30(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		Integer type = getParaToInt("type");
		
		Page<LoanOverdue> loanOverdues = loanOverdueService.queryOverdueTrace30(pageNumber,pageSize,type);
		
		return succ("查询成功", loanOverdues);
		
	}
	
	/**
	 * 查询逾期信息
	 * @return
	 */
	@ActionKey("/queryOverdueTraceByCode")
	@Before({PkMsgInterceptor.class})
	public Message queryOverdueTraceByCode(){
		String overdueCode = getPara("overdueCode");
		if(StringUtil.isBlank(overdueCode)){
			return error("01", "参数错误", "");
		}
		LoanOverdue loanOverdue = loanOverdueService.findById(overdueCode);
		return succ("查询成功", loanOverdue);
		
	}
	
	
	
	/**
	 * 查询债权转让
	 * @return
	 */
	@ActionKey("/queryLoanTransfer")
	@Before({PkMsgInterceptor.class})
//	@ResponseCached(cachedKey="queryLoanTransfer", cachedKeyParm="pageNumber|pageSize|minLimit|maxLimit|transState|orderParam|orderType",mode="remote" , time=5)
	public Message queryLoanTransfer(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		String minLimit = getPara("minLimit");
		String maxLimit = getPara("maxLimit");
		String transState = getPara("transState","A");
		String orderParam = getPara("orderParam","");
		String orderType = getPara("orderType","DESC");
		
		//获取3天前日期
		//String delDay = DateUtil.delDay(DateUtil.getNowDate(), 3L);
		
		Page<LoanTransfer> loanTransfers = loanTransferService.queryCanTransfer(pageNumber, pageSize,minLimit,maxLimit,transState,orderParam,orderType);
		Integer count = loanTransferService.queryTransferCount("A");
		Map<String , Object> map = new HashMap<String, Object>();
		map.put("firstPage", loanTransfers.isFirstPage());
		map.put("lastPage", loanTransfers.isLastPage());
		map.put("pageNumber", loanTransfers.getPageNumber());
		map.put("pageSize", loanTransfers.getPageSize());
		map.put("totalPage", loanTransfers.getTotalPage());
		map.put("totalRow", loanTransfers.getTotalRow());
		map.put("list", loanTransfers.getList());
		map.put("transferCount", count);
		
		return succ("查询成功", map);
		
	}

	
	/**
	 * 查询指定债权转让
	 * @return
	 */
	@ActionKey("/queryLoanTransfer4Code")
	@Before({PkMsgInterceptor.class})
	@ResponseCached(cachedKey="queryLoanTransfer4Code", cachedKeyParm="transferCode",mode="remote" , time=5)
	public Message queryLoanTransfer4Code(){
		
		String transferCode = getPara("transferCode");
		
		//验证数据完整性
		if(StringUtil.isBlank(transferCode)){
			return error("01", "参数错误", "");
		}
		
		LoanTransfer transferInfo = LoanTransfer.loanTransferDao.findById(transferCode);
		
		return succ("查询成功", transferInfo);
		
	}
	
	
	/**
	 * 查询转让的债权
	 * @return
	 */
	@ActionKey("/queryLoanTransfer4user")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryLoanTransfer4user(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		
		//获取用户标识
		String userCode = getUserCode();
		Page<LoanTransfer> loanTransfers = loanTransferService.queryLoanTransfer(pageNumber, pageSize, userCode);
		Long totalLeftAmount = loanTransferService.sumLeftAmount(userCode);
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("totalLeftAmount",  totalLeftAmount);
		map.put("loanTransfers", loanTransfers);
		return succ("查询成功", map);
	}
	
	/**
	 * 查询承接的债权
	 * @return
	 */
	@ActionKey("/queryGotLoanTransfer4user")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryGotLoanTransfer4user(){
		
		int pageNumber = getPageNumber();
		int pageSize = getPageSize();
		
		//获取用户标识
		String userCode = getUserCode();
		Page<LoanTransfer> loanTransfers = loanTransferService.queryGotLoanTransfer(pageNumber, pageSize, userCode);
		Long totalGotAmount = loanTransferService.sumGotAmount(userCode);
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("totalGotAmount",  totalGotAmount);
		map.put("loanTransfers", loanTransfers);
		return succ("查询成功", map);
	}
	
	
	/**
	 * 统计承接的债权总金额
	 * @return
	 */
	@ActionKey("/queryGotTransferTotal")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryGotTransferTotal(){
		String userCode = getUserCode();
		Long sumGotAmount = loanTransferService.sumGotAmount(userCode);
		Map<String,Object> totalMap = new HashMap<String, Object>();
		totalMap.put("totalAmount",  sumGotAmount);
		return succ("查询成功", totalMap);
	}
	
	
	/**
	 * 发布债权转让
	 * @return
	 */
	@ActionKey("/debentureTransfer")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message debentureTransfer(){
		
		String traceCode = getPara("traceCode");
		Integer transFee = 0;
		try{
			transFee = getParaToInt("transFee");
		}catch(Exception e){
			return error("03", "请输出正确让利金额", "");
		}
		
		String payPwd = getPara("payPwd");
		
		//验证
		if(StringUtil.isBlank(traceCode)){
			return error("01", "转让标书编号错误", traceCode);
		}
		if(transFee < 0){
			return error("01", "让利金额错误", transFee);
		}
		
		//获取用户信息
		String userCode = getUserCode();
		User user = User.userDao.findById(userCode);
		if("".equals(user.getStr("loginId"))||null==user.getStr("loginId")){
			return error("24", "未激活存管帐号，不能进行此操作", "");
		}
		//验证支付密码
		if(!CommonUtil.validatePwd(userCode, payPwd, user.getStr("payPasswd"))){
			//记录日志
			return error("05", "支付密码错误", "");
		}
		
		//验证用户是否标的投资者
		LoanTrace loanTrace = LoanTrace.loanTraceDao.findById(traceCode);
		if(null == loanTrace){
			return error("02", "只有您投资的标才能转让", traceCode);
		}
		
		try {
			if(loanTrace.getStr("payUserCode").equals(userCode) == false)
				return error("02", "只有您投资的标才能转让", traceCode);
		} catch (Exception e) {
			return error("02", "只有您投资的标才能转让", traceCode);
		}
		
		//验证是否已经转让
		//LoanTransfer loanTransfer = LoanTransfer.loanTransferDao.findFirst("select * from t_loan_transfer where transState != 'C' and traceCode = ? ", traceCode);
		String isTransfer = Db.queryStr("select isTransfer from t_loan_trace where traceCode = ?",traceCode);
		if(isTransfer.equals("A")){
			return error("06", "该标书正在转让,请勿重复操作!", "");
		}
		
		//检查让利金额 小于让利百分比（配置项中修改）
		int f = 1;
		try{
			f = Integer.parseInt(CACHED.get("ZQ.transFee").toString());
		}catch(Exception e){
		}
		if(transFee > ( loanTrace.getLong("leftAmount") / 10.0/10.0 * f )){
			return error("07", "让利金额不能超过投标金额的百分之"+f, "");
		}
		long ticket_amount = 0;
		try {
			/**
			 * TODO 债权转让兼容抵用券
			 */
			String json_tickets = loanTrace.getStr("loanTicket");
			if(StringUtil.isBlank(json_tickets)==false){
				JSONArray ja = JSONArray.parseArray(json_tickets);
				for (int i = 0; i < ja.size(); i++) {
					JSONObject jsonObj = ja.getJSONObject(i);
					if(jsonObj.getString("type").equals("A")){
						//20170519-----20170726新券调整  ws
						Long examount= jsonObj.getLong("examount");
						String isDel=jsonObj.getString("isDel");
						if(null==isDel||"".equals(isDel)){
							if(null==examount||examount>50000){
								ticket_amount = ticket_amount + jsonObj.getLong("amount");
							}
						}else{
							if("Y".equals(isDel)){
								ticket_amount = ticket_amount + jsonObj.getLong("amount");
							}
						}
						//end
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			ticket_amount = 0;
		}
		if(loanTrace.getLong("leftAmount") <= ticket_amount){
			return error("187", "此投资使用了现金抵用券，但剩余本金小于抵用券抵扣现金金额", "");
		}
		//计算转让积分
		int loanTimeLimit = loanTrace.getInt("loanTimeLimit");
		long amount = loanTrace.getLong("payAmount");
		String refundType = loanTrace.getStr("refundType");
		String effectDate =  loanInfoService.findFieldById(loanTrace.getStr("loanCode"),"effectDate");//审核满标日期
		String lastSettlementDate = CommonUtil.anyRepaymentDate4string(effectDate, loanTimeLimit);//最后一期还款日期
		int allDays = (int) CommonUtil.compareDateTime(lastSettlementDate, effectDate, "yyyyMMdd");
		int leftDays = (int) CommonUtil.compareDateTime(lastSettlementDate, DateUtil.getNowDate(), "yyyyMMdd");
		long allScore = CommonUtil.f_005(amount, loanTimeLimit , refundType) ;
		long tmp = CommonUtil.yunsuan(allScore+"", allDays+"", "chu", 0).longValue();
		int leftScore = (int) CommonUtil.yunsuan(tmp+"", leftDays+"", "cheng", 0).longValue();
		
		isTransfer = Db.queryStr("select isTransfer from t_loan_trace where traceCode = ?",traceCode);
		if(isTransfer.equals("A")){
			return error("06", "该标书正在转让,请勿重复操作!", "");
		}
		//修改标书债权状态
		boolean updateTraceState = loanTraceService.updateTransferState(loanTrace.getStr("traceCode"), "C", "A");
		if(updateTraceState == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "转让债权时修改投标流水状态修改异常", null);
			return error("02", "修改投标流水状态失败", null);
		}
		
		//保存债权信息
		boolean result = loanTransferService.saveLoanTransfer(transFee, leftScore ,loanTrace);
		if(result == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "债权转让发布失败", null);
			return error("02", "债权转让发布失败", null);
		}
		
		//扣除转让人积分
		fundsServiceV2.doPoints(userCode, 1 , leftScore , "发布转让债权，冻结积分");
		
		BIZ_LOG_INFO(traceCode, BIZ_TYPE.TRANSFER, "债权转让发布成功");
		
		return succ("发布债权成功", "");
	}

	
	/**
	 * 取消债权转让
	 * @return
	 */
	@ActionKey("/cancelTransfer")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message cancelTransfer(){
		
		String transferCode = getPara("transferCode");
		
		if(StringUtil.isBlank(transferCode)){
			return error("01", "参数错误", "transferCode : " + transferCode);
		}
		
		//获取用户标识
		String userCode = getUserCode();
		
		//验证债权是否存在   是否被转让
		LoanTransfer loanTransfer = LoanTransfer.loanTransferDao.findFirst(
				"select traceCode, transState,transScore from t_loan_transfer where transCode = ? and payUserCode = ? and transState = 'A' ",
				transferCode , userCode);
		if(null == loanTransfer){
			BIZ_LOG_WARN(userCode, BIZ_TYPE.TRANSFER, "债权取消失败，债权未查到或已转让");
			return error("02", "债权未查到或已转让", "");
		}
		
		//取消债权转让
		LoanTransfer cancelLoanTransfer = new LoanTransfer();
		cancelLoanTransfer.set("transCode", transferCode);
		cancelLoanTransfer.set("transState", "C");
		boolean updateResult = false;
		try{
			updateResult = cancelLoanTransfer.update();
		}catch(Exception e){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "债权取消失败", e);
		}
		
		if( updateResult == false ){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "债权取消失败",null);
			return error("03", "债权取消失败", null);
		}
		//修改标书债权状态
		boolean updateTraceState = false;
		if(loanTransferService.vilidateIsTransfer(loanTransfer.getStr("traceCode"))){
			updateTraceState = loanTraceService.updateTransferState(loanTransfer.getStr("traceCode"),
					"A", "B");
		}else{
			updateTraceState = loanTraceService.updateTransferState(loanTransfer.getStr("traceCode"),
					"A", "C");
		}
		if(updateTraceState == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "债权取消成功,但标书债权状态修改异常", null);
			return error("05", "债权取消成功,但标书债权状态修改异常", null);
		}
		
		//回滚积分
		int transScore = loanTransfer.getInt("transScore");
		fundsServiceV2.doPoints(userCode, 0 , transScore , "取消债权转让,返回冻结积分!");
		
		BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "债权取消成功");
		
		return succ("债权取消成功", "");
	}
	
	/**
	 * 承接债权转让
	 * @return
	 */
	@ActionKey("/carryOnTransfer")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message carryOnTransfer(){
		
		//限制还款时间不让承接     10点半到11点
//		int exeTime = Integer.parseInt(DateUtil.getNowTime());
//		if(exeTime >= 103000 && exeTime <= 110000){
//			return error("12", "10:30至11:00系统正在还款，请稍后操作。", "");
//		}
		
		String transferCode = getPara("transferCode");
		String payPwd = getPara("payPwd");
		String smsMsg = getPara("smsMsg");
		
		//获取用户信息
		String userCode = getUserCode();
		
		//手机端验证短信验证码  	PC端验证 图片验证码
		if(StringUtil.isBlank(smsMsg)){
			if( validateCaptcha("cv") == false ){
				Message msg = error("11", "验证码错误", "");
//				renderJson(msg);
				return msg;
			}
//			Message msg = checkCapTicket("cac_z02_v1");
//			if( msg != null ){
//				return msg ;
//			}
		}else{
			if(CommonUtil.validateSMS("SMS_MSG_TRANSFER_" + userCode, smsMsg) == false){
				return error("11", "短信验证码不正确。", "");
			}
		}
		
		//获取转让标信息
		LoanTransfer loanTransfer = loanTransferService.findById(transferCode);
		if(null == loanTransfer){
			return error("01", "债权标书获取异常", "");
		}

		
		User user = userService.findById(userCode);
		if("".equals(user.getStr("loginId"))||null==user.getStr("loginId")){
			return error("24", "未激活存管帐号，不能进行此操作", "");
		}
		//用户资金验证 ws 20170818
		Funds funds = fundsServiceV2.findById(userCode);
		QueryBalanceResultData fuiouFunds =	fuiouTraceService.BalanceFunds(user);
		if (funds.getLong("avBalance") != Long.parseLong(fuiouFunds.getCa_balance()) || 
				funds.getLong("frozeBalance") != Long.parseLong(fuiouFunds.getCf_balance())) {
			return error("20", "用户资金异常", "");
			}
		//end
		if(userCode.equals(loanTransfer.getStr("payUserCode"))){
			return error("02", "不能承接自己发出的债权", "");
		}
		
		//验证支付密码
		if(!CommonUtil.validatePwd(userCode, payPwd, user.getStr("payPasswd"))){
			return error("03", "支付密码错误或被冻结", "");
		}
		
		//验证承接人可用余额是否足够
		long avBalance = fundsServiceV2.findAvBalanceById(userCode);
		int transAmount = loanTransfer.getInt("transAmount");
		if(avBalance < transAmount){
			return error("04", "账户可用余额不足!", "");
		}
		//查询承接人存管余额 20170602 ws
		QueryBalanceResultData queryB=fuiouTraceService.BalanceFunds(user);
		if(null==queryB){
			return error("22","查询用户存管账户余额失败"+userCode,false);
		}
		if(Long.valueOf(queryB.getCa_balance()) < transAmount){
			return error("23", "存管账户可用余额不足!", "");
		}
		//end
		
		//修改投标债权状态到  已转让
		boolean updateTraceState = loanTraceService.updateTransferState(loanTransfer.getStr("traceCode"),
				"A", "B");
		if(updateTraceState == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "承接债权失败[08]", null);
			return error("08", "承接债权失败[08]", "");
		}
		
		//转换相关金额存入资金流水备注
		Integer sysFee = loanTransfer.getInt("sysFee") ;//平台手续费
		Integer transFee = loanTransfer.getInt("transFee");//转让人让利金额
		Integer riskFee = loanTransfer.getInt("riskFee");//风险备用金
//		Integer userFee = loanTransfer.getInt("userFee");//用户额外获得收益
		
		double remark4transFee = new BigDecimal((float)transFee/10.0/10.0).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		double remark4sysFee = new BigDecimal((float)sysFee/10.0/10.0).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		double remark4riskFee = new BigDecimal((float)riskFee/10.0/10.0).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		double remark4userFee = new BigDecimal((float)(transFee-riskFee)/10.0/10.0).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
		
		//递减承接人可用余额
		String remark = "债权转让支出，让利金额：￥"+remark4transFee+"（用户收益：￥"+remark4userFee+"，风险备用金：￥"+remark4riskFee+"）";
		boolean b = fundsServiceV2.carryOnTransfer(userCode, transAmount,remark);
		
		if(b==true){
			//记录日志
			BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "承接债权扣除可用余额成功  扣除金额  : " + transAmount);
		}
		
		if(b == false){
			BIZ_LOG_ERROR(userCode, BIZ_TYPE.TRANSFER, "承接债权-添加流水失败", null);
			return error("05", "承接债权失败-[添加扣款流水失败]!", "");
		}
		
		String traceCode = loanTransfer.getStr("traceCode");
		LoanTrace loanTrace = loanTraceService.findById(traceCode);
		
		long ticket_amount = 0;
		
		String traceRemark = "债权转让收入，让利金额：￥"+remark4transFee+"，债权转让费：￥" + remark4sysFee;
		
		//查询是否转让过
		List<LoanTransfer> isTransfer =  loanTransferService.queryLoanTransferByTraceCode(loanTransfer.getStr("traceCode") , "B");
		if(null == isTransfer || isTransfer.size() <= 0 ){
			try {
				
				String json_tickets = loanTrace.getStr("loanTicket");
				if(StringUtil.isBlank(json_tickets)==false){
					JSONArray ja = JSONArray.parseArray(json_tickets);
					for (int i = 0; i < ja.size(); i++) {
						JSONObject jsonObj = ja.getJSONObject(i);
						if(jsonObj.getString("type").equals("A")){
							//20170519   ---20170726新券改动  ws
							Long examount= jsonObj.getLong("examount");
							String isDel=jsonObj.getString("isDel");
							if(null==isDel||"".equals(isDel)){
								if(null==examount||examount>50000){
									ticket_amount = jsonObj.getLong("amount");
									traceRemark += "，现金券金额：￥"+ticket_amount/10/10;
								}
							}else{
								if("Y".equals(isDel)){
									ticket_amount = jsonObj.getLong("amount");
									traceRemark += "，现金券金额：￥"+ticket_amount/10/10;
								}
							}
							//end
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		//转让人
		String payUserCode = loanTransfer.getStr("payUserCode");
		User payUser=userService.findById(payUserCode);
		//转让价格(承接人实际付款) - 平台手续费
		long payTransAmount = transAmount - sysFee - ticket_amount;//债权人转让收益，扣除手续费和抵用券费用
		boolean carryOnTransferTo = fundsServiceV2.carryOnTransferTo(payUserCode, payTransAmount, sysFee ,transFee,traceRemark);
		if(carryOnTransferTo==true){
			//记录日志
			BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "转让债权增加可用余额成功  收益金额  : " + payTransAmount);
		}
		
		if(carryOnTransferTo == false){
			BIZ_LOG_ERROR(payUserCode, BIZ_TYPE.TRANSFER, "承接债权-添加转让人流水失败", null);
			return error("06", "承接债权失败-[添加转让人流水失败]!", "");
		}
		
		//修改债权状态 并验证是否已经被转让
		boolean updateTransferState = loanTransferService.updateTransferState(transferCode,userCode,user.getStr("userName"));
		if(updateTransferState == false){
			//回滚资金
			fundsServiceV2.doAvBalance(userCode, 0, transAmount);
			fundsServiceV2.doAvBalance(payUserCode, 1, payTransAmount);
			//回滚流水状态
			loanTraceService.updateTransferState(loanTransfer.getStr("traceCode"),
					"B", "A");
			//记录日志
			BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "承接债权失败资金回滚");
			BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "转让债权失败资金回滚");
			return error("07", "债权已被承接", "");
		}else{
			//更新冗余信息     by wc
//			CommonUtil.f_000(amount, limit, rate, countLimit, rt)
			
			if(null == loanTrace){
				//回滚资金
				fundsServiceV2.doAvBalance(userCode, 0, transAmount);
				fundsServiceV2.doAvBalance(payUserCode, 1, payTransAmount);
				//记录日志
				BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
				BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
				return error("09", "债权数据出现异常，请联系客服处理。", "");
			}
			
			String oPayUserCode = loanTrace.getStr("payUserCode");
//			long amount = loanTrace.getLong("payAmount");
//			int rate = loanTrace.getInt("rateByYear") + loanTrace.getInt("rewardRateByYear") ;
			int reciedCount = loanTrace.getInt("loanRecyCount");
			int limit = loanTrace.getInt("loanTimeLimit");
//			String type = loanTrace.getStr("refundType") ;
			long[] benxi = new long[2];//CommonUtil.f_005(amount, rate, limit, reciedCount, type) ;
			benxi[0] = loanTrace.getLong("leftAmount");
			benxi[1] = loanTrace.getLong("leftInterest");
			
			//修改债权归属
			loanTrace.set("payUserCode", userCode );
			loanTrace.set("payUserName", user.getStr("userName") );
			
			boolean updateTrace = loanTrace.update();
			if(updateTrace == false){
				//回滚资金
				fundsServiceV2.doAvBalance(userCode, 0, transAmount);
				fundsServiceV2.doAvBalance(payUserCode, 1, payTransAmount);
				//记录日志
				BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
				BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
				return error("10", "债权数据出现异常，请联系客服处理。", "");
			}
			//存管系统资金流动  20170616 ws
			if("".equals(payUser.getStr("loginId"))||null==payUser.getStr("loginId")){
				User wzuser=userService.findByMobile(CommonUtil.OUTCUSTNO);
				CommonRspData com=	fuiouTraceService.refund(Long.valueOf(transAmount),FuiouTraceType.T,user,wzuser,transferCode);
				if(!"0000".equals(com.getResp_code())){
					//回滚资金
					fundsServiceV2.doAvBalance(userCode, 0, transAmount);
					fundsServiceV2.doAvBalance(payUserCode, 1, payTransAmount);
					//记录日志
					BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
					BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
					return error("12", "债权数据出现异常，请联系客服处理。", "");
				}
					loanTransfer.set("transCode", com.getMchnt_txn_ssn());
					loanTransfer.update();
				}else{
					User wzuser =userService.findByMobile(CommonUtil.OUTCUSTNO);
					CommonRspData comm=fuiouTraceService.refund(Long.valueOf(transAmount), FuiouTraceType.T, user,payUser,transferCode);//扣除承接人资金
					if("0000".equals(comm.getResp_code())){
						fuiouTraceService.refund(sysFee + ticket_amount, FuiouTraceType.V, payUser,wzuser,transferCode);//转让人扣除服务费+抵用券
						loanTransfer.set("transCode", comm.getMchnt_txn_ssn());
						loanTransfer.update();
					}else{
				//回滚资金
						fundsServiceV2.doAvBalance(userCode, 0, transAmount);
						fundsServiceV2.doAvBalance(payUserCode, 1, payTransAmount);
				//记录日志
						BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
						BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "债权数据出现异常资金回滚");
						return error("11", "债权数据出现异常，请联系客服处理。", "");
			}}
			//end
			
			//更新冗余账户 (更新理财人待还账户)
			int beRecyCount = limit - reciedCount ;
			//减少原投资人账户	oPayUserCode      //  增加已回收资金  利息	 shiqingsong 2016-02-18
			long reciedInterest = transAmount - benxi[0] - transFee;
			fundsServiceV2.updateBeRecyFunds(oPayUserCode, (0-beRecyCount), (0-benxi[0]), (0-benxi[1]), benxi[0] ,  reciedInterest > 0 ? reciedInterest : 0);
			//增加接受人
			fundsServiceV2.updateBeRecyFunds(userCode, beRecyCount, benxi[0], benxi[1], 0 ,  0 );
			
		}
		//生日当天承接债转，双倍积分 rain   2017.8.31
		int transScore = loanTransfer.getInt("transScore");
		String cardId="";
		UserInfo userInfo=userInfoService.findById(userCode);
		
		cardId=userInfo.getStr("userCardId");
		
		if(CommonUtil.isBirth(cardId)){
			transScore=transScore*2;
		}
		
		
		fundsServiceV2.doPoints(userCode, 0, transScore, "承接债权获取可用积分收益!");
		userService.updateScore(userCode, transScore) ;
		
		//增加风险备用金
		fundsServiceV2.updateRiskTotal(loanTransfer.getInt("riskFee"));
		
			
		//记录日志
		BIZ_LOG_INFO(userCode, BIZ_TYPE.TRANSFER, "承接债权成功");
		BIZ_LOG_INFO(payUserCode, BIZ_TYPE.TRANSFER, "转让债权成功");
		
		return succ("承接债权成功", "");
	}
	
	
	/**
	 * 获取发标预告
	 * @return
	 */
	@ActionKey("/queryNotice")
	@Before({PkMsgInterceptor.class})
	@ResponseCached(cachedKey="queryNotice", cachedKeyParm="",mode="remote" , time=60)
	public Message queryNotice(){
		Page<LoanNotice> loanNotices = loanNoticeService.findByPage(
				1, 10, DateUtil.getNowDateTime(), null, "0", null);
		
		return succ("00", loanNotices);
	}
	
	
	
	/**
	 * 根据标书标识获取某个用户的投标情况
	 * @return
	 */
	@ActionKey("/queryBidding4User")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryFunds4user() {
		
		String loanCode = getPara("loanCode");
		
		if(StringUtil.isBlank(loanCode)){
			return error("01", "参数错误", null);
		}
		
		//获取用户标识
		String userCode = getUserCode();
		
		//获取用户资金信息
		Funds funds = fundsServiceV2.getFundsByUserCode(userCode);
		
		//投标信息
		Map<String , Long> totalMap = loanTraceService.totalByLoan4user(loanCode , userCode );
		totalMap.put("avBalance", funds.getLong("avBalance"));
		
		//返回
		return succ("查询成功", totalMap);
	}
	
	/**
	 * 查询回款详情
	 */
	@ActionKey("/queryLoanReturn")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryLoanReturn(){
		String traceCode = getPara("traceCode");
		if(StringUtil.isBlank(traceCode)){
			return error("01", "参数错误", "");
		}
		LoanTrace loanTrace = loanTraceService.findById(traceCode);
		long amount = loanTrace.getLong("payAmount");
		int limit = loanTrace.getInt("loanTimeLimit");
		int rate = loanTrace.getInt("rateByYear")+loanTrace.getInt("rewardRateByYear");
		LiCai licai = new LiCai(amount, rate, limit);
		Map<String,Object> map = new HashMap<String, Object>();
		List<Map<String, Long>> licaiMap = new ArrayList<Map<String,Long>>();
		if("A".equals(loanTrace.getStr("refundType"))){
			licaiMap = licai.getDengEList();
		}else{
			licaiMap = licai.getDengXiList();
		}
		map.put("loanTrace", loanTrace);
		map.put("licaiMap", licaiMap);
		return succ("查询成功", map);
		
	}	
	
	
	/////////////////////////////   私有函数     ////////////////////////////////////////////
	
	
	/**
	 * 我要理财页面-查询详细的标书信息页面
	 * @return
	 */
	private Message queryBidDetail(String userCode , String loanCode){
		if(StringUtil.isBlank(loanCode)){
			return error("01", "标书编码不合法", null);
		}
		LoanInfo loanInfo = loanInfoService.findById(loanCode);
		Map<String,Object> tmp = new HashMap<String, Object>();
		tmp.put("loanCode", loanInfo.getStr("loanCode"));
		tmp.put("loanNO", loanInfo.getStr("loanNo"));
		tmp.put("loanTitle", loanInfo.getStr("loanTitle"));
		tmp.put("rateByYear", loanInfo.getInt("rateByYear"));
		tmp.put("rewardRateByYear", loanInfo.getInt("rewardRateByYear"));
		tmp.put("loanAmount", loanInfo.getLong("loanAmount"));
		tmp.put("loanBalance", loanInfo.getLong("loanBalance"));
		tmp.put("loanTimeLimit", loanInfo.getInt("loanTimeLimit"));
		tmp.put("refundType", loanInfo.getStr("refundType"));
		tmp.put("loanState", loanInfo.getStr("loanState"));
		tmp.put("loanArea", loanInfo.getStr("loanArea"));
		tmp.put("releaseDate", loanInfo.getStr("releaseDate"));
		tmp.put("releaseTime", loanInfo.getStr("releaseTime"));
		tmp.put("minLoanAmount", loanInfo.getInt("minLoanAmount"));
		tmp.put("maxLoanAmount", loanInfo.getInt("maxLoanAmount"));
		tmp.put("loanBaseDesc", loanInfo.getStr("loanBaseDesc"));
		tmp.put("loanUsedDesc", loanInfo.getStr("loanUsedDesc"));
		tmp.put("loanerDataDesc", loanInfo.getStr("loanerDataDesc"));
		tmp.put("loanInvDesc", loanInfo.getStr("loanInvDesc"));
		tmp.put("loanPic", loanInfo.getStr("loan_pic"));
		tmp.put("loanRiskDesc", "");
		tmp.put("loanDesc", loanInfo.getStr("loanDesc"));
		tmp.put("reciedCount", loanInfo.getInt("reciedCount"));
		tmp.put("effectDate", loanInfo.getStr("effectDate"));
		tmp.put("effectTime", loanInfo.getStr("effectTime"));
		tmp.put("benefits4new", loanInfo.getInt("benefits4new"));
		tmp.put("serverTime", DateUtil.getNowDateTime());
		tmp.put("lastPayLoanDateTime", loanInfo.getStr("lastPayLoanDateTime"));
		tmp.put("productType", loanInfo.getStr("productType"));
		tmp.put("loanThumbnail", loanInfo.getStr("loanThumbnail"));
		tmp.put("contractNo", loanInfo.getStr("contractNo"));
		String loanUserInfo = loanApplyService.findLoanUserDetail(loanInfo.getStr("loanNo"));
		if(StringUtil.isBlank(loanUserInfo) == false){
			JSONObject xx = JSONObject.parseObject(loanUserInfo);
			if(null != xx){
				xx.remove("loanTrueName");xx.remove("loanCardId");xx.remove("loanMobile");xx.remove("loanMail");
				tmp.put("loanUserInfo", xx.toJSONString());
			}
		}
		if(!StringUtil.isBlank(userCode)){
			long avBalance = 0L;
			Funds funds = fundsServiceV2.getFundsByUserCode(userCode);
			if(funds != null){
				avBalance = funds.getLong("avBalance");
			}
			tmp.put("avBalance", avBalance);
		}
		return succ("获取成功", tmp);
	}
	/**
	 * 查询日回款本息 ws 20170914
	 * */
	private Map<String, Object> getbackbx(LoanTrace loanTrace,String day,String loanstate,SettlementEarly settlementEarly){
		Map<String, Object> map = new HashMap<String, Object>();
		int loanlimit=loanTrace.getInt("loanTimeLimit");
		String loanDate=loanTrace.getStr("effectDate");
		int loanRecyCount = loanTrace.getInt("loanRecyCount");
		String loanReDate = loanTrace.getStr("loanRecyDate");
		int yy=Integer.parseInt(loanDate.substring(0, 4));
		int mm=Integer.parseInt(loanDate.substring(4, 6));
		String dd=day.substring(6, 8);
		String refundType = loanTrace.getStr("refundType");
		long payAmount = loanTrace.getLong("payAmount");
		int rateByYear =loanTrace.getInt("rateByYear")+loanTrace.getInt("rewardRateByYear");
		double rate=(double)rateByYear/120000.0;
		long bx=Math.round((((payAmount*rate)*Math.pow((1+rate) , loanlimit ) / ( Math.pow( (1 + rate) , loanlimit ) - 1 ))));
		for(int i=0;i<loanlimit;i++){
			mm++;
			if(mm>12){
				mm=mm-12;
				yy++;
			}
			String datetime="";
			if(mm<10){
				datetime =yy+"0"+mm+dd;
			}else{
				datetime =yy+""+mm+dd;}//日期
			String stateName="回款成功";
			if (i > (loanlimit - loanRecyCount - 1)) {
				stateName = "回款中";
			}
			String num =i+1+"/"+loanlimit;
			long ben=0;long xi=0;
			if("A".equals(refundType)){
				long xi1=payAmount*rateByYear/120000;
				xi=xi1;
				payAmount=payAmount-bx+xi1;
				ben=bx-xi1;
			}
			if("B".equals(refundType)){
				if(i==loanlimit-1){
					ben=payAmount;
					xi=rateByYear*payAmount/120000;
				}else{
					xi=rateByYear*payAmount/120000;
				}
			}
			if(datetime.equals(day)){
				map.put("loanNo", loanTrace.getStr("loanNo"));
				map.put("num", num);
				map.put("stateName", stateName);
				if("P".equals(loanstate)&&loanReDate.equals(day)){
					ben+=payAmount;
					map.put("stateName", "提前还款成功");
					}
//				if("N".equals(loanstate)){
//					if(null!=settlementEarly){
//						if("A".equals(settlementEarly.getStr("estatus"))){
//							String earlydate=settlementEarly.getStr("earlyDate");//提前回款日期
//							int earlydd=Integer.parseInt(earlydate.substring(6, 8));
//							int days=DateUtil.getDaysByYearMonth(day);
//							if(earlydd>days){
//								earlydate=earlydate.substring(0, 6)+days;
//							}
//							if(earlydate.equals(day)){
//								ben+=payAmount;
//								map.put("stateName", "预设提前还款");
//							}
//						}
//					}
//				}
				map.put("ben", ben);
				map.put("xi", xi);
				break;
				}
			}
		return map;
		}
	/**
	 * 查询月回款 ws 20170914
	 * */
	private boolean checkusertranfer(List<LoanTransfer> traceTransfers,int date,LoanTrace loanTrace,String traceCode,String userCode){
		String loanDate=loanTrace.getStr("effectDate");
		int loanlimit=loanTrace.getInt("loanTimeLimit");
		int ym=Integer.parseInt(loanDate.substring(0, 6));
		int year=ym/100;
		int month=ym%100;
		if(traceTransfers.size()<=0){
			return true;
		}else if(traceTransfers.size()==1){
			LoanTransfer traceTran=traceTransfers.get(0);
			String gotym=traceTran.getStr("gotDate").substring(0, 6);
			String gotDay=traceTran.getStr("gotDate").substring(6, 8);
			if(Integer.parseInt(gotym)<date){
				return true;
			}else if(Integer.parseInt(gotym)==date){
				int dd=Integer.parseInt(loanDate.substring(6, 8));
				if(dd>Integer.parseInt(gotDay)){
					return true;
				}
			}
		}else{
			for(int i=0;i<traceTransfers.size()-1;i++){
				LoanTransfer traceTran1=traceTransfers.get(i);
				LoanTransfer traceTran2=traceTransfers.get(i+1);
				int gotDate1=Integer.parseInt(traceTran1.getStr("gotDate"));
				int gotDate2=Integer.parseInt(traceTran2.getStr("gotDate"));
				LoanTransfer traceTran3=loanTransferService.getLoanTransfer8UserDate(traceCode, "B", userCode,gotDate2,gotDate1);
				if(i==0){
					String gotym1=traceTran1.getStr("gotDate").substring(0, 6);
					String gotDay1=traceTran1.getStr("gotDate").substring(6, 8);
					if(Integer.parseInt(gotym1)<date){
						return true;
					}else if(Integer.parseInt(gotym1)==date){
						int dd=Integer.parseInt(loanDate.substring(6, 8));
						if(dd>Integer.parseInt(gotDay1)){
							return true;
						}
					}
					int loanRecyCount3=traceTran3.getInt("loanRecyCount");
					int loanRecyCount2=traceTran2.getInt("loanRecyCount");
					if(loanRecyCount2-loanRecyCount3>0){
						int a=(month+loanlimit-loanRecyCount2)/12;
						int b=(month+loanlimit-loanRecyCount2)%12;
						int ym2=(year+a)*100+b;
						if(ym2<date){
							a=(month+loanlimit-loanRecyCount3)/12;
							b=(month+loanlimit-loanRecyCount3)%12;
							int ym3=(year+a)*100+b;
							if(ym3>=date){
								return true;
								}
							}
						}
				}else{
					int loanRecyCount3=traceTran3.getInt("loanRecyCount");
					int loanRecyCount2=traceTran2.getInt("loanRecyCount");
					if(loanRecyCount2-loanRecyCount3>0){
						int a=(month+loanlimit-loanRecyCount2)/12;
						int b=(month+loanlimit-loanRecyCount2)%12;
						int ym2=(year+a)*100+b;
						if(ym2<date){
							a=(month+loanlimit-loanRecyCount3)/12;
							b=(month+loanlimit-loanRecyCount3)%12;
							int ym3=(year+a)*100+b;
							if(ym3>=date){
								return true;
								}
							}
						}
				}
			}
		}
		return false;
	}
}









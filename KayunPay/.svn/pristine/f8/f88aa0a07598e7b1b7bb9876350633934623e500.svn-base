package com.dutiantech.controller.admin;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.dutiantech.Message;
import com.dutiantech.anno.AuthNum;
import com.dutiantech.controller.BaseController;
import com.dutiantech.interceptor.AuthInterceptor;
import com.dutiantech.interceptor.PkMsgInterceptor;
import com.dutiantech.model.ContractTemplate;
import com.dutiantech.service.ContractTemplateService;
import com.dutiantech.util.DateUtil;
import com.jfinal.aop.Before;
import com.jfinal.core.ActionKey;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.tx.Tx;

public class ContractTemplateController extends BaseController {

	private ContractTemplateService templateService = getService(ContractTemplateService.class);
	
	//查询合同模板列表
	@ActionKey("/queryTemplateList")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,PkMsgInterceptor.class})
	public Message queryTemplateList(){
		Integer pageNumber = getParaToInt("pageNumber",1);
		Integer pageSize = getParaToInt("pageSize",10);
		String allkey = getPara("allkey","");
		Page<ContractTemplate> pageTemplate = templateService.findAllByPage(pageNumber, pageSize, allkey);
		if(pageTemplate!=null){
		if(pageNumber > pageTemplate.getTotalPage()&&pageTemplate.getTotalPage()>0){
			pageNumber = pageTemplate.getTotalPage();
			pageTemplate = templateService.findAllByPage(pageNumber, pageSize, allkey);
		}
		}
		
		return succ("操作完成",pageTemplate);
	}
	
	//查询合同模板详情
	@ActionKey("/findTemplateByCode")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message findTemplateByCode(){
		String templateCode = getPara("templateCode");
		ContractTemplate contractTemplate = templateService.findById(templateCode);
		return succ("查询成功",contractTemplate);
		
	}
	
	//修改合同模板
	@ActionKey("/modTemplate")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message modTemplate() throws ParseException{

		ContractTemplate contractTemplate = getModel(ContractTemplate.class,"contractTemplate");
		
		String updateDateTime = DateUtil.getDateStrFromDateTime(new Date());//获取更新时间
		String addDateTime =contractTemplate.getStr("addDateTime");//获取添加时间

		
		//时间格式转化
		 SimpleDateFormat sdf =  new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
		 Date date = sdf.parse(addDateTime);
		 addDateTime = DateUtil.getDateStrFromDateTime(date);
		contractTemplate.put("updateDateTime",updateDateTime);
		contractTemplate.put("addDateTime",addDateTime);
		boolean result = templateService.changeByCode(contractTemplate);
		if(result) return succ("修改成功",result);
		return error("no","修改失败",null);
	}
	
	//删除模板
	@ActionKey("/deleteContractTemplate")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message deleteTemplate(){
		String templateCode = getPara("templateCode");
		boolean deleteByCode = templateService.deleteByCode(templateCode);
		if(deleteByCode){
			return succ("删除成功",true);
		}else{
			return error("no","删除失败",null);
		}
	}
	
	//新增模板
	@ActionKey("/newTemplate")
	@AuthNum(value=999)
	@Before({AuthInterceptor.class,Tx.class,PkMsgInterceptor.class})
	public Message newTemplate(){
		ContractTemplate contractTemplate = getModel(ContractTemplate.class,"contractTemplate");
		
		boolean saveTemplate = templateService.saveTemplate(contractTemplate);
		if(saveTemplate) return succ("添加成功！",true);
		return error("no","添加失败！",null);
	}
}
